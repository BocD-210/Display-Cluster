
Hardware_ECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003790  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800389c  0800389c  0001389c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038dc  080038dc  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080038dc  080038dc  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038dc  080038dc  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038dc  080038dc  000138dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038e0  080038e0  000138e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080038e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000014  080038f8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  080038f8  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b9b3  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bc5  00000000  00000000  0002b9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  0002d5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b08  00000000  00000000  0002e198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017690  00000000  00000000  0002eca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c436  00000000  00000000  00046330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bb65  00000000  00000000  00052766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000de2cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000316c  00000000  00000000  000de320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08003884 	.word	0x08003884

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08003884 	.word	0x08003884

0800014c <millis>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint32_t millis(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8000150:	f000 fd78 	bl	8000c44 <HAL_GetTick>
 8000154:	4603      	mov	r3, r0
}
 8000156:	4618      	mov	r0, r3
 8000158:	bd80      	pop	{r7, pc}
	...

0800015c <HAL_GPIO_EXTI_Callback>:

//ENCODER + TIMER + SWITCH INTERRUPT

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	80fb      	strh	r3, [r7, #6]
	uint32_t now = millis();
 8000166:	f7ff fff1 	bl	800014c <millis>
 800016a:	60f8      	str	r0, [r7, #12]

    if (GPIO_Pin == GPIO_PIN_1) // PA1 = CLK
 800016c:	88fb      	ldrh	r3, [r7, #6]
 800016e:	2b02      	cmp	r3, #2
 8000170:	d14c      	bne.n	800020c <HAL_GPIO_EXTI_Callback+0xb0>
    {
    	if ((now - last_encoder_time) < debounce_delay) return;
 8000172:	4b4c      	ldr	r3, [pc, #304]	; (80002a4 <HAL_GPIO_EXTI_Callback+0x148>)
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	68fa      	ldr	r2, [r7, #12]
 8000178:	1ad3      	subs	r3, r2, r3
 800017a:	220a      	movs	r2, #10
 800017c:	4293      	cmp	r3, r2
 800017e:	f0c0 808b 	bcc.w	8000298 <HAL_GPIO_EXTI_Callback+0x13c>
			last_encoder_time = now;
 8000182:	4a48      	ldr	r2, [pc, #288]	; (80002a4 <HAL_GPIO_EXTI_Callback+0x148>)
 8000184:	68fb      	ldr	r3, [r7, #12]
 8000186:	6013      	str	r3, [r2, #0]

        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET) {
 8000188:	2104      	movs	r1, #4
 800018a:	4847      	ldr	r0, [pc, #284]	; (80002a8 <HAL_GPIO_EXTI_Callback+0x14c>)
 800018c:	f002 f974 	bl	8002478 <HAL_GPIO_ReadPin>
 8000190:	4603      	mov	r3, r0
 8000192:	2b00      	cmp	r3, #0
 8000194:	d10f      	bne.n	80001b6 <HAL_GPIO_EXTI_Callback+0x5a>
            // Quay nguoc
            if (brightness > BRIGHTNESS_MIN)
 8000196:	4b45      	ldr	r3, [pc, #276]	; (80002ac <HAL_GPIO_EXTI_Callback+0x150>)
 8000198:	881b      	ldrh	r3, [r3, #0]
 800019a:	b21b      	sxth	r3, r3
 800019c:	2200      	movs	r2, #0
 800019e:	4293      	cmp	r3, r2
 80001a0:	dd18      	ble.n	80001d4 <HAL_GPIO_EXTI_Callback+0x78>
                brightness--;
 80001a2:	4b42      	ldr	r3, [pc, #264]	; (80002ac <HAL_GPIO_EXTI_Callback+0x150>)
 80001a4:	881b      	ldrh	r3, [r3, #0]
 80001a6:	b21b      	sxth	r3, r3
 80001a8:	b29b      	uxth	r3, r3
 80001aa:	3b01      	subs	r3, #1
 80001ac:	b29b      	uxth	r3, r3
 80001ae:	b21a      	sxth	r2, r3
 80001b0:	4b3e      	ldr	r3, [pc, #248]	; (80002ac <HAL_GPIO_EXTI_Callback+0x150>)
 80001b2:	801a      	strh	r2, [r3, #0]
 80001b4:	e00e      	b.n	80001d4 <HAL_GPIO_EXTI_Callback+0x78>
        } else {
            // Quay thuan
            if (brightness < BRIGHTNESS_MAX)
 80001b6:	4b3d      	ldr	r3, [pc, #244]	; (80002ac <HAL_GPIO_EXTI_Callback+0x150>)
 80001b8:	881b      	ldrh	r3, [r3, #0]
 80001ba:	b21b      	sxth	r3, r3
 80001bc:	2264      	movs	r2, #100	; 0x64
 80001be:	4293      	cmp	r3, r2
 80001c0:	da08      	bge.n	80001d4 <HAL_GPIO_EXTI_Callback+0x78>
                brightness++;
 80001c2:	4b3a      	ldr	r3, [pc, #232]	; (80002ac <HAL_GPIO_EXTI_Callback+0x150>)
 80001c4:	881b      	ldrh	r3, [r3, #0]
 80001c6:	b21b      	sxth	r3, r3
 80001c8:	b29b      	uxth	r3, r3
 80001ca:	3301      	adds	r3, #1
 80001cc:	b29b      	uxth	r3, r3
 80001ce:	b21a      	sxth	r2, r3
 80001d0:	4b36      	ldr	r3, [pc, #216]	; (80002ac <HAL_GPIO_EXTI_Callback+0x150>)
 80001d2:	801a      	strh	r2, [r3, #0]
        }

       //Capnhap trang thai led thong qua timer2_CH1
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, brightness);
 80001d4:	4b35      	ldr	r3, [pc, #212]	; (80002ac <HAL_GPIO_EXTI_Callback+0x150>)
 80001d6:	881b      	ldrh	r3, [r3, #0]
 80001d8:	b21a      	sxth	r2, r3
 80001da:	4b35      	ldr	r3, [pc, #212]	; (80002b0 <HAL_GPIO_EXTI_Callback+0x154>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	635a      	str	r2, [r3, #52]	; 0x34

        encoder_value = brightness;
 80001e0:	4b32      	ldr	r3, [pc, #200]	; (80002ac <HAL_GPIO_EXTI_Callback+0x150>)
 80001e2:	881b      	ldrh	r3, [r3, #0]
 80001e4:	b21b      	sxth	r3, r3
 80001e6:	b29a      	uxth	r2, r3
 80001e8:	4b32      	ldr	r3, [pc, #200]	; (80002b4 <HAL_GPIO_EXTI_Callback+0x158>)
 80001ea:	801a      	strh	r2, [r3, #0]

        // Chỉ set c�? nếu giá trị mới khác giá trị trước
		if (encoder_value != prev_encoder_value) {
 80001ec:	4b31      	ldr	r3, [pc, #196]	; (80002b4 <HAL_GPIO_EXTI_Callback+0x158>)
 80001ee:	881b      	ldrh	r3, [r3, #0]
 80001f0:	b29a      	uxth	r2, r3
 80001f2:	4b31      	ldr	r3, [pc, #196]	; (80002b8 <HAL_GPIO_EXTI_Callback+0x15c>)
 80001f4:	881b      	ldrh	r3, [r3, #0]
 80001f6:	429a      	cmp	r2, r3
 80001f8:	d051      	beq.n	800029e <HAL_GPIO_EXTI_Callback+0x142>
			prev_encoder_value = encoder_value;
 80001fa:	4b2e      	ldr	r3, [pc, #184]	; (80002b4 <HAL_GPIO_EXTI_Callback+0x158>)
 80001fc:	881b      	ldrh	r3, [r3, #0]
 80001fe:	b29a      	uxth	r2, r3
 8000200:	4b2d      	ldr	r3, [pc, #180]	; (80002b8 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000202:	801a      	strh	r2, [r3, #0]
			flag_encoder = 1;
 8000204:	4b2d      	ldr	r3, [pc, #180]	; (80002bc <HAL_GPIO_EXTI_Callback+0x160>)
 8000206:	2201      	movs	r2, #1
 8000208:	701a      	strb	r2, [r3, #0]
 800020a:	e048      	b.n	800029e <HAL_GPIO_EXTI_Callback+0x142>
		}

    }
    else if (GPIO_Pin == GPIO_PIN_0) // PA0 = Switch
 800020c:	88fb      	ldrh	r3, [r7, #6]
 800020e:	2b01      	cmp	r3, #1
 8000210:	d145      	bne.n	800029e <HAL_GPIO_EXTI_Callback+0x142>
	{
    	if ((now - last_button_time) < debounce_delay) return;
 8000212:	4b2b      	ldr	r3, [pc, #172]	; (80002c0 <HAL_GPIO_EXTI_Callback+0x164>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	68fa      	ldr	r2, [r7, #12]
 8000218:	1ad3      	subs	r3, r2, r3
 800021a:	220a      	movs	r2, #10
 800021c:	4293      	cmp	r3, r2
 800021e:	d33d      	bcc.n	800029c <HAL_GPIO_EXTI_Callback+0x140>
			last_button_time = now;
 8000220:	4a27      	ldr	r2, [pc, #156]	; (80002c0 <HAL_GPIO_EXTI_Callback+0x164>)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	6013      	str	r3, [r2, #0]

    	button_value = (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) ? 1 : 0;
 8000226:	2101      	movs	r1, #1
 8000228:	481f      	ldr	r0, [pc, #124]	; (80002a8 <HAL_GPIO_EXTI_Callback+0x14c>)
 800022a:	f002 f925 	bl	8002478 <HAL_GPIO_ReadPin>
 800022e:	4603      	mov	r3, r0
 8000230:	2b01      	cmp	r3, #1
 8000232:	bf0c      	ite	eq
 8000234:	2301      	moveq	r3, #1
 8000236:	2300      	movne	r3, #0
 8000238:	b2db      	uxtb	r3, r3
 800023a:	461a      	mov	r2, r3
 800023c:	4b21      	ldr	r3, [pc, #132]	; (80002c4 <HAL_GPIO_EXTI_Callback+0x168>)
 800023e:	701a      	strb	r2, [r3, #0]
    	if (button_value != prev_button_value) {
 8000240:	4b20      	ldr	r3, [pc, #128]	; (80002c4 <HAL_GPIO_EXTI_Callback+0x168>)
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	b2da      	uxtb	r2, r3
 8000246:	4b20      	ldr	r3, [pc, #128]	; (80002c8 <HAL_GPIO_EXTI_Callback+0x16c>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	429a      	cmp	r2, r3
 800024c:	d027      	beq.n	800029e <HAL_GPIO_EXTI_Callback+0x142>
			prev_button_value = button_value;
 800024e:	4b1d      	ldr	r3, [pc, #116]	; (80002c4 <HAL_GPIO_EXTI_Callback+0x168>)
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	b2da      	uxtb	r2, r3
 8000254:	4b1c      	ldr	r3, [pc, #112]	; (80002c8 <HAL_GPIO_EXTI_Callback+0x16c>)
 8000256:	701a      	strb	r2, [r3, #0]

			if (button_value == 1) {
 8000258:	4b1a      	ldr	r3, [pc, #104]	; (80002c4 <HAL_GPIO_EXTI_Callback+0x168>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	b2db      	uxtb	r3, r3
 800025e:	2b01      	cmp	r3, #1
 8000260:	d116      	bne.n	8000290 <HAL_GPIO_EXTI_Callback+0x134>
				led_state = !led_state;
 8000262:	4b1a      	ldr	r3, [pc, #104]	; (80002cc <HAL_GPIO_EXTI_Callback+0x170>)
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	2b00      	cmp	r3, #0
 8000268:	bf0c      	ite	eq
 800026a:	2301      	moveq	r3, #1
 800026c:	2300      	movne	r3, #0
 800026e:	b2db      	uxtb	r3, r3
 8000270:	461a      	mov	r2, r3
 8000272:	4b16      	ldr	r3, [pc, #88]	; (80002cc <HAL_GPIO_EXTI_Callback+0x170>)
 8000274:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, led_state ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000276:	4b15      	ldr	r3, [pc, #84]	; (80002cc <HAL_GPIO_EXTI_Callback+0x170>)
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	2b00      	cmp	r3, #0
 800027c:	bf0c      	ite	eq
 800027e:	2301      	moveq	r3, #1
 8000280:	2300      	movne	r3, #0
 8000282:	b2db      	uxtb	r3, r3
 8000284:	461a      	mov	r2, r3
 8000286:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800028a:	4811      	ldr	r0, [pc, #68]	; (80002d0 <HAL_GPIO_EXTI_Callback+0x174>)
 800028c:	f002 f90b 	bl	80024a6 <HAL_GPIO_WritePin>
			}

			flag_button = 1;
 8000290:	4b10      	ldr	r3, [pc, #64]	; (80002d4 <HAL_GPIO_EXTI_Callback+0x178>)
 8000292:	2201      	movs	r2, #1
 8000294:	701a      	strb	r2, [r3, #0]
 8000296:	e002      	b.n	800029e <HAL_GPIO_EXTI_Callback+0x142>
    	if ((now - last_encoder_time) < debounce_delay) return;
 8000298:	bf00      	nop
 800029a:	e000      	b.n	800029e <HAL_GPIO_EXTI_Callback+0x142>
    	if ((now - last_button_time) < debounce_delay) return;
 800029c:	bf00      	nop
		}
	}
}
 800029e:	3710      	adds	r7, #16
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000040 	.word	0x20000040
 80002a8:	40010800 	.word	0x40010800
 80002ac:	20000000 	.word	0x20000000
 80002b0:	200000a0 	.word	0x200000a0
 80002b4:	2000003c 	.word	0x2000003c
 80002b8:	20000002 	.word	0x20000002
 80002bc:	20000039 	.word	0x20000039
 80002c0:	20000044 	.word	0x20000044
 80002c4:	2000003e 	.word	0x2000003e
 80002c8:	2000003f 	.word	0x2000003f
 80002cc:	20000038 	.word	0x20000038
 80002d0:	40011000 	.word	0x40011000
 80002d4:	2000003a 	.word	0x2000003a

080002d8 <Read_ADC>:

uint16_t Read_ADC(void){
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 80002dc:	4817      	ldr	r0, [pc, #92]	; (800033c <Read_ADC+0x64>)
 80002de:	f000 fdb7 	bl	8000e50 <HAL_ADC_Start>
		if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK){  //
 80002e2:	2164      	movs	r1, #100	; 0x64
 80002e4:	4815      	ldr	r0, [pc, #84]	; (800033c <Read_ADC+0x64>)
 80002e6:	f000 fe8d 	bl	8001004 <HAL_ADC_PollForConversion>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d119      	bne.n	8000324 <Read_ADC+0x4c>

			adc_value = HAL_ADC_GetValue(&hadc1);
 80002f0:	4812      	ldr	r0, [pc, #72]	; (800033c <Read_ADC+0x64>)
 80002f2:	f000 ff8d 	bl	8001210 <HAL_ADC_GetValue>
 80002f6:	4603      	mov	r3, r0
 80002f8:	4a11      	ldr	r2, [pc, #68]	; (8000340 <Read_ADC+0x68>)
 80002fa:	6013      	str	r3, [r2, #0]

			pwm_value = (adc_value * 1000) / 4095;
 80002fc:	4b10      	ldr	r3, [pc, #64]	; (8000340 <Read_ADC+0x68>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000304:	fb02 f203 	mul.w	r2, r2, r3
 8000308:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <Read_ADC+0x6c>)
 800030a:	fba3 1302 	umull	r1, r3, r3, r2
 800030e:	1ad2      	subs	r2, r2, r3
 8000310:	0852      	lsrs	r2, r2, #1
 8000312:	4413      	add	r3, r2
 8000314:	0adb      	lsrs	r3, r3, #11
 8000316:	4a0c      	ldr	r2, [pc, #48]	; (8000348 <Read_ADC+0x70>)
 8000318:	6013      	str	r3, [r2, #0]

			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm_value);
 800031a:	4b0c      	ldr	r3, [pc, #48]	; (800034c <Read_ADC+0x74>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4a0a      	ldr	r2, [pc, #40]	; (8000348 <Read_ADC+0x70>)
 8000320:	6812      	ldr	r2, [r2, #0]
 8000322:	639a      	str	r2, [r3, #56]	; 0x38
		}

		HAL_ADC_Stop(&hadc1);
 8000324:	4805      	ldr	r0, [pc, #20]	; (800033c <Read_ADC+0x64>)
 8000326:	f000 fe41 	bl	8000fac <HAL_ADC_Stop>
		HAL_Delay(10);
 800032a:	200a      	movs	r0, #10
 800032c:	f000 fc94 	bl	8000c58 <HAL_Delay>

		return adc_value;
 8000330:	4b03      	ldr	r3, [pc, #12]	; (8000340 <Read_ADC+0x68>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	b29b      	uxth	r3, r3
}
 8000336:	4618      	mov	r0, r3
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000070 	.word	0x20000070
 8000340:	20000030 	.word	0x20000030
 8000344:	00100101 	.word	0x00100101
 8000348:	20000034 	.word	0x20000034
 800034c:	200000a0 	.word	0x200000a0

08000350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b08a      	sub	sp, #40	; 0x28
 8000354:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000356:	f000 fc1d 	bl	8000b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800035a:	f000 f899 	bl	8000490 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800035e:	f000 f9e5 	bl	800072c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000362:	f000 f8f1 	bl	8000548 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000366:	f000 f97f 	bl	8000668 <MX_TIM2_Init>
  MX_CAN_Init();
 800036a:	f000 f92b 	bl	80005c4 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //Start PWM on TIM2 CH1
 800036e:	2100      	movs	r1, #0
 8000370:	483f      	ldr	r0, [pc, #252]	; (8000470 <main+0x120>)
 8000372:	f002 fe7f 	bl	8003074 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 50);
 8000376:	4b3e      	ldr	r3, [pc, #248]	; (8000470 <main+0x120>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	2232      	movs	r2, #50	; 0x32
 800037c:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Start PWM on TIM2 CH2
 800037e:	2104      	movs	r1, #4
 8000380:	483b      	ldr	r0, [pc, #236]	; (8000470 <main+0x120>)
 8000382:	f002 fe77 	bl	8003074 <HAL_TIM_PWM_Start>

  HAL_CAN_Start(&hcan); // Start CAN
 8000386:	483b      	ldr	r0, [pc, #236]	; (8000474 <main+0x124>)
 8000388:	f001 faa5 	bl	80018d6 <HAL_CAN_Start>

  CAN_TxHeaderTypeDef TxHeader;
  uint8_t TxData[8];
  uint32_t TxMailbox;

  TxHeader.IDE = CAN_ID_STD;
 800038c:	2300      	movs	r3, #0
 800038e:	617b      	str	r3, [r7, #20]
  TxHeader.RTR = CAN_RTR_DATA;
 8000390:	2300      	movs	r3, #0
 8000392:	61bb      	str	r3, [r7, #24]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint16_t prev_adc_value = 0xFFFF;
	  uint16_t adc_now = Read_ADC();
 8000394:	f7ff ffa0 	bl	80002d8 <Read_ADC>
 8000398:	4603      	mov	r3, r0
 800039a:	84fb      	strh	r3, [r7, #38]	; 0x26
	  if (adc_now != prev_adc_value) {
 800039c:	4b36      	ldr	r3, [pc, #216]	; (8000478 <main+0x128>)
 800039e:	881b      	ldrh	r3, [r3, #0]
 80003a0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80003a2:	429a      	cmp	r2, r3
 80003a4:	d016      	beq.n	80003d4 <main+0x84>
		  prev_adc_value = adc_now;
 80003a6:	4a34      	ldr	r2, [pc, #208]	; (8000478 <main+0x128>)
 80003a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80003aa:	8013      	strh	r3, [r2, #0]
		  TxHeader.StdId = 0x125;  // ID cho ADC
 80003ac:	f240 1325 	movw	r3, #293	; 0x125
 80003b0:	60fb      	str	r3, [r7, #12]
		  TxHeader.DLC = 2;
 80003b2:	2302      	movs	r3, #2
 80003b4:	61fb      	str	r3, [r7, #28]
		  TxData[0] = (adc_now >> 8) & 0xFF;
 80003b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80003b8:	0a1b      	lsrs	r3, r3, #8
 80003ba:	b29b      	uxth	r3, r3
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	713b      	strb	r3, [r7, #4]
		  TxData[1] = adc_now & 0xFF;
 80003c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	717b      	strb	r3, [r7, #5]
		  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 80003c6:	463b      	mov	r3, r7
 80003c8:	1d3a      	adds	r2, r7, #4
 80003ca:	f107 010c 	add.w	r1, r7, #12
 80003ce:	4829      	ldr	r0, [pc, #164]	; (8000474 <main+0x124>)
 80003d0:	f001 fac5 	bl	800195e <HAL_CAN_AddTxMessage>
	  }

	  // Gửi encoder nếu có flag
	  if (flag_encoder) {
 80003d4:	4b29      	ldr	r3, [pc, #164]	; (800047c <main+0x12c>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d01a      	beq.n	8000414 <main+0xc4>
		  flag_encoder = 0;
 80003de:	4b27      	ldr	r3, [pc, #156]	; (800047c <main+0x12c>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	701a      	strb	r2, [r3, #0]
		  TxHeader.StdId = 0x123; // ID cho encoder
 80003e4:	f240 1323 	movw	r3, #291	; 0x123
 80003e8:	60fb      	str	r3, [r7, #12]
		  TxHeader.DLC = 2;
 80003ea:	2302      	movs	r3, #2
 80003ec:	61fb      	str	r3, [r7, #28]
		  TxData[0] = (encoder_value >> 8) & 0xFF;
 80003ee:	4b24      	ldr	r3, [pc, #144]	; (8000480 <main+0x130>)
 80003f0:	881b      	ldrh	r3, [r3, #0]
 80003f2:	b29b      	uxth	r3, r3
 80003f4:	0a1b      	lsrs	r3, r3, #8
 80003f6:	b29b      	uxth	r3, r3
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	713b      	strb	r3, [r7, #4]
		  TxData[1] = encoder_value & 0xFF;
 80003fc:	4b20      	ldr	r3, [pc, #128]	; (8000480 <main+0x130>)
 80003fe:	881b      	ldrh	r3, [r3, #0]
 8000400:	b29b      	uxth	r3, r3
 8000402:	b2db      	uxtb	r3, r3
 8000404:	717b      	strb	r3, [r7, #5]
		  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000406:	463b      	mov	r3, r7
 8000408:	1d3a      	adds	r2, r7, #4
 800040a:	f107 010c 	add.w	r1, r7, #12
 800040e:	4819      	ldr	r0, [pc, #100]	; (8000474 <main+0x124>)
 8000410:	f001 faa5 	bl	800195e <HAL_CAN_AddTxMessage>
	  }

	  // Gửi button nếu có flag
	  if (flag_button) {
 8000414:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <main+0x134>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	b2db      	uxtb	r3, r3
 800041a:	2b00      	cmp	r3, #0
 800041c:	d012      	beq.n	8000444 <main+0xf4>
		  flag_button = 0;
 800041e:	4b19      	ldr	r3, [pc, #100]	; (8000484 <main+0x134>)
 8000420:	2200      	movs	r2, #0
 8000422:	701a      	strb	r2, [r3, #0]
		  TxHeader.StdId = 0x124; // ID cho button
 8000424:	f44f 7392 	mov.w	r3, #292	; 0x124
 8000428:	60fb      	str	r3, [r7, #12]
		  TxHeader.DLC = 1;
 800042a:	2301      	movs	r3, #1
 800042c:	61fb      	str	r3, [r7, #28]
		  TxData[0] = button_value;
 800042e:	4b16      	ldr	r3, [pc, #88]	; (8000488 <main+0x138>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	b2db      	uxtb	r3, r3
 8000434:	713b      	strb	r3, [r7, #4]
		  HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000436:	463b      	mov	r3, r7
 8000438:	1d3a      	adds	r2, r7, #4
 800043a:	f107 010c 	add.w	r1, r7, #12
 800043e:	480d      	ldr	r0, [pc, #52]	; (8000474 <main+0x124>)
 8000440:	f001 fa8d 	bl	800195e <HAL_CAN_AddTxMessage>
	  }

	  HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000444:	463b      	mov	r3, r7
 8000446:	1d3a      	adds	r2, r7, #4
 8000448:	f107 010c 	add.w	r1, r7, #12
 800044c:	4809      	ldr	r0, [pc, #36]	; (8000474 <main+0x124>)
 800044e:	f001 fa86 	bl	800195e <HAL_CAN_AddTxMessage>
 8000452:	4603      	mov	r3, r0
 8000454:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	  if (status != HAL_OK) {
 8000458:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800045c:	2b00      	cmp	r3, #0
 800045e:	d099      	beq.n	8000394 <main+0x44>
	      // Blink LED để báo lỗi
	      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000466:	4809      	ldr	r0, [pc, #36]	; (800048c <main+0x13c>)
 8000468:	f002 f81d 	bl	80024a6 <HAL_GPIO_WritePin>
  {
 800046c:	e792      	b.n	8000394 <main+0x44>
 800046e:	bf00      	nop
 8000470:	200000a0 	.word	0x200000a0
 8000474:	20000048 	.word	0x20000048
 8000478:	20000004 	.word	0x20000004
 800047c:	20000039 	.word	0x20000039
 8000480:	2000003c 	.word	0x2000003c
 8000484:	2000003a 	.word	0x2000003a
 8000488:	2000003e 	.word	0x2000003e
 800048c:	40011000 	.word	0x40011000

08000490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b094      	sub	sp, #80	; 0x50
 8000494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000496:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800049a:	2228      	movs	r2, #40	; 0x28
 800049c:	2100      	movs	r1, #0
 800049e:	4618      	mov	r0, r3
 80004a0:	f003 f9e8 	bl	8003874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a4:	f107 0314 	add.w	r3, r7, #20
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	605a      	str	r2, [r3, #4]
 80004ae:	609a      	str	r2, [r3, #8]
 80004b0:	60da      	str	r2, [r3, #12]
 80004b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]
 80004bc:	609a      	str	r2, [r3, #8]
 80004be:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004c0:	2301      	movs	r3, #1
 80004c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004ca:	2300      	movs	r3, #0
 80004cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ce:	2301      	movs	r3, #1
 80004d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004d2:	2302      	movs	r3, #2
 80004d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80004dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80004e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004e6:	4618      	mov	r0, r3
 80004e8:	f002 f80e 	bl	8002508 <HAL_RCC_OscConfig>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80004f2:	f000 f99f 	bl	8000834 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f6:	230f      	movs	r3, #15
 80004f8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004fa:	2302      	movs	r3, #2
 80004fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004fe:	2300      	movs	r3, #0
 8000500:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000506:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000508:	2300      	movs	r3, #0
 800050a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800050c:	f107 0314 	add.w	r3, r7, #20
 8000510:	2101      	movs	r1, #1
 8000512:	4618      	mov	r0, r3
 8000514:	f002 fa78 	bl	8002a08 <HAL_RCC_ClockConfig>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800051e:	f000 f989 	bl	8000834 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000522:	2302      	movs	r3, #2
 8000524:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000526:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800052a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	4618      	mov	r0, r3
 8000530:	f002 fbe4 	bl	8002cfc <HAL_RCCEx_PeriphCLKConfig>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800053a:	f000 f97b 	bl	8000834 <Error_Handler>
  }
}
 800053e:	bf00      	nop
 8000540:	3750      	adds	r7, #80	; 0x50
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
	...

08000548 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000558:	4b18      	ldr	r3, [pc, #96]	; (80005bc <MX_ADC1_Init+0x74>)
 800055a:	4a19      	ldr	r2, [pc, #100]	; (80005c0 <MX_ADC1_Init+0x78>)
 800055c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800055e:	4b17      	ldr	r3, [pc, #92]	; (80005bc <MX_ADC1_Init+0x74>)
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000564:	4b15      	ldr	r3, [pc, #84]	; (80005bc <MX_ADC1_Init+0x74>)
 8000566:	2201      	movs	r2, #1
 8000568:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800056a:	4b14      	ldr	r3, [pc, #80]	; (80005bc <MX_ADC1_Init+0x74>)
 800056c:	2200      	movs	r2, #0
 800056e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000570:	4b12      	ldr	r3, [pc, #72]	; (80005bc <MX_ADC1_Init+0x74>)
 8000572:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000576:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000578:	4b10      	ldr	r3, [pc, #64]	; (80005bc <MX_ADC1_Init+0x74>)
 800057a:	2200      	movs	r2, #0
 800057c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800057e:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <MX_ADC1_Init+0x74>)
 8000580:	2201      	movs	r2, #1
 8000582:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000584:	480d      	ldr	r0, [pc, #52]	; (80005bc <MX_ADC1_Init+0x74>)
 8000586:	f000 fb8b 	bl	8000ca0 <HAL_ADC_Init>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000590:	f000 f950 	bl	8000834 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000594:	2303      	movs	r3, #3
 8000596:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000598:	2301      	movs	r3, #1
 800059a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	4619      	mov	r1, r3
 80005a4:	4805      	ldr	r0, [pc, #20]	; (80005bc <MX_ADC1_Init+0x74>)
 80005a6:	f000 fe3f 	bl	8001228 <HAL_ADC_ConfigChannel>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80005b0:	f000 f940 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005b4:	bf00      	nop
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000070 	.word	0x20000070
 80005c0:	40012400 	.word	0x40012400

080005c4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08a      	sub	sp, #40	; 0x28
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80005ca:	4b25      	ldr	r3, [pc, #148]	; (8000660 <MX_CAN_Init+0x9c>)
 80005cc:	4a25      	ldr	r2, [pc, #148]	; (8000664 <MX_CAN_Init+0xa0>)
 80005ce:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 80005d0:	4b23      	ldr	r3, [pc, #140]	; (8000660 <MX_CAN_Init+0x9c>)
 80005d2:	2208      	movs	r2, #8
 80005d4:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80005d6:	4b22      	ldr	r3, [pc, #136]	; (8000660 <MX_CAN_Init+0x9c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005dc:	4b20      	ldr	r3, [pc, #128]	; (8000660 <MX_CAN_Init+0x9c>)
 80005de:	2200      	movs	r2, #0
 80005e0:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80005e2:	4b1f      	ldr	r3, [pc, #124]	; (8000660 <MX_CAN_Init+0x9c>)
 80005e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005e8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80005ea:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <MX_CAN_Init+0x9c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80005f0:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <MX_CAN_Init+0x9c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80005f6:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <MX_CAN_Init+0x9c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80005fc:	4b18      	ldr	r3, [pc, #96]	; (8000660 <MX_CAN_Init+0x9c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000602:	4b17      	ldr	r3, [pc, #92]	; (8000660 <MX_CAN_Init+0x9c>)
 8000604:	2200      	movs	r2, #0
 8000606:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000608:	4b15      	ldr	r3, [pc, #84]	; (8000660 <MX_CAN_Init+0x9c>)
 800060a:	2200      	movs	r2, #0
 800060c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800060e:	4b14      	ldr	r3, [pc, #80]	; (8000660 <MX_CAN_Init+0x9c>)
 8000610:	2200      	movs	r2, #0
 8000612:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000614:	4812      	ldr	r0, [pc, #72]	; (8000660 <MX_CAN_Init+0x9c>)
 8000616:	f000 ff9a 	bl	800154e <HAL_CAN_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000620:	f000 f908 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  // Thêm vào MX_CAN_Init()
  CAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterBank = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800062c:	2301      	movs	r3, #1
 800062e:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000630:	2300      	movs	r3, #0
 8000632:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 800063c:	2300      	movs	r3, #0
 800063e:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000644:	2301      	movs	r3, #1
 8000646:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8000648:	230e      	movs	r3, #14
 800064a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 800064c:	463b      	mov	r3, r7
 800064e:	4619      	mov	r1, r3
 8000650:	4803      	ldr	r0, [pc, #12]	; (8000660 <MX_CAN_Init+0x9c>)
 8000652:	f001 f877 	bl	8001744 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 8000656:	bf00      	nop
 8000658:	3728      	adds	r7, #40	; 0x28
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000048 	.word	0x20000048
 8000664:	40006400 	.word	0x40006400

08000668 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	; 0x28
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]
 8000686:	615a      	str	r2, [r3, #20]
 8000688:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800068a:	4b27      	ldr	r3, [pc, #156]	; (8000728 <MX_TIM2_Init+0xc0>)
 800068c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000690:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8000692:	4b25      	ldr	r3, [pc, #148]	; (8000728 <MX_TIM2_Init+0xc0>)
 8000694:	221f      	movs	r2, #31
 8000696:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000698:	4b23      	ldr	r3, [pc, #140]	; (8000728 <MX_TIM2_Init+0xc0>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800069e:	4b22      	ldr	r3, [pc, #136]	; (8000728 <MX_TIM2_Init+0xc0>)
 80006a0:	2264      	movs	r2, #100	; 0x64
 80006a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a4:	4b20      	ldr	r3, [pc, #128]	; (8000728 <MX_TIM2_Init+0xc0>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006aa:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <MX_TIM2_Init+0xc0>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006b0:	481d      	ldr	r0, [pc, #116]	; (8000728 <MX_TIM2_Init+0xc0>)
 80006b2:	f002 fc8f 	bl	8002fd4 <HAL_TIM_PWM_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80006bc:	f000 f8ba 	bl	8000834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c0:	2300      	movs	r3, #0
 80006c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006c8:	f107 0320 	add.w	r3, r7, #32
 80006cc:	4619      	mov	r1, r3
 80006ce:	4816      	ldr	r0, [pc, #88]	; (8000728 <MX_TIM2_Init+0xc0>)
 80006d0:	f003 f84e 	bl	8003770 <HAL_TIMEx_MasterConfigSynchronization>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80006da:	f000 f8ab 	bl	8000834 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006de:	2360      	movs	r3, #96	; 0x60
 80006e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	2200      	movs	r2, #0
 80006f2:	4619      	mov	r1, r3
 80006f4:	480c      	ldr	r0, [pc, #48]	; (8000728 <MX_TIM2_Init+0xc0>)
 80006f6:	f002 fd5f 	bl	80031b8 <HAL_TIM_PWM_ConfigChannel>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000700:	f000 f898 	bl	8000834 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2204      	movs	r2, #4
 8000708:	4619      	mov	r1, r3
 800070a:	4807      	ldr	r0, [pc, #28]	; (8000728 <MX_TIM2_Init+0xc0>)
 800070c:	f002 fd54 	bl	80031b8 <HAL_TIM_PWM_ConfigChannel>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000716:	f000 f88d 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800071a:	4803      	ldr	r0, [pc, #12]	; (8000728 <MX_TIM2_Init+0xc0>)
 800071c:	f000 f96e 	bl	80009fc <HAL_TIM_MspPostInit>

}
 8000720:	bf00      	nop
 8000722:	3728      	adds	r7, #40	; 0x28
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200000a0 	.word	0x200000a0

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b088      	sub	sp, #32
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 0310 	add.w	r3, r7, #16
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000740:	4b38      	ldr	r3, [pc, #224]	; (8000824 <MX_GPIO_Init+0xf8>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	4a37      	ldr	r2, [pc, #220]	; (8000824 <MX_GPIO_Init+0xf8>)
 8000746:	f043 0310 	orr.w	r3, r3, #16
 800074a:	6193      	str	r3, [r2, #24]
 800074c:	4b35      	ldr	r3, [pc, #212]	; (8000824 <MX_GPIO_Init+0xf8>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f003 0310 	and.w	r3, r3, #16
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000758:	4b32      	ldr	r3, [pc, #200]	; (8000824 <MX_GPIO_Init+0xf8>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	4a31      	ldr	r2, [pc, #196]	; (8000824 <MX_GPIO_Init+0xf8>)
 800075e:	f043 0320 	orr.w	r3, r3, #32
 8000762:	6193      	str	r3, [r2, #24]
 8000764:	4b2f      	ldr	r3, [pc, #188]	; (8000824 <MX_GPIO_Init+0xf8>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f003 0320 	and.w	r3, r3, #32
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000770:	4b2c      	ldr	r3, [pc, #176]	; (8000824 <MX_GPIO_Init+0xf8>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	4a2b      	ldr	r2, [pc, #172]	; (8000824 <MX_GPIO_Init+0xf8>)
 8000776:	f043 0304 	orr.w	r3, r3, #4
 800077a:	6193      	str	r3, [r2, #24]
 800077c:	4b29      	ldr	r3, [pc, #164]	; (8000824 <MX_GPIO_Init+0xf8>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f003 0304 	and.w	r3, r3, #4
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000788:	4b26      	ldr	r3, [pc, #152]	; (8000824 <MX_GPIO_Init+0xf8>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	4a25      	ldr	r2, [pc, #148]	; (8000824 <MX_GPIO_Init+0xf8>)
 800078e:	f043 0308 	orr.w	r3, r3, #8
 8000792:	6193      	str	r3, [r2, #24]
 8000794:	4b23      	ldr	r3, [pc, #140]	; (8000824 <MX_GPIO_Init+0xf8>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f003 0308 	and.w	r3, r3, #8
 800079c:	603b      	str	r3, [r7, #0]
 800079e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80007a0:	2201      	movs	r2, #1
 80007a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a6:	4820      	ldr	r0, [pc, #128]	; (8000828 <MX_GPIO_Init+0xfc>)
 80007a8:	f001 fe7d 	bl	80024a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b2:	2301      	movs	r3, #1
 80007b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b6:	2301      	movs	r3, #1
 80007b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2302      	movs	r3, #2
 80007bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007be:	f107 0310 	add.w	r3, r7, #16
 80007c2:	4619      	mov	r1, r3
 80007c4:	4818      	ldr	r0, [pc, #96]	; (8000828 <MX_GPIO_Init+0xfc>)
 80007c6:	f001 fcd3 	bl	8002170 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007ca:	2303      	movs	r3, #3
 80007cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80007ce:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_GPIO_Init+0x100>)
 80007d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d6:	f107 0310 	add.w	r3, r7, #16
 80007da:	4619      	mov	r1, r3
 80007dc:	4814      	ldr	r0, [pc, #80]	; (8000830 <MX_GPIO_Init+0x104>)
 80007de:	f001 fcc7 	bl	8002170 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007e2:	2304      	movs	r3, #4
 80007e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ee:	f107 0310 	add.w	r3, r7, #16
 80007f2:	4619      	mov	r1, r3
 80007f4:	480e      	ldr	r0, [pc, #56]	; (8000830 <MX_GPIO_Init+0x104>)
 80007f6:	f001 fcbb 	bl	8002170 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2100      	movs	r1, #0
 80007fe:	2006      	movs	r0, #6
 8000800:	f001 fc7f 	bl	8002102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000804:	2006      	movs	r0, #6
 8000806:	f001 fc98 	bl	800213a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2100      	movs	r1, #0
 800080e:	2007      	movs	r0, #7
 8000810:	f001 fc77 	bl	8002102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000814:	2007      	movs	r0, #7
 8000816:	f001 fc90 	bl	800213a <HAL_NVIC_EnableIRQ>

}
 800081a:	bf00      	nop
 800081c:	3720      	adds	r7, #32
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40021000 	.word	0x40021000
 8000828:	40011000 	.word	0x40011000
 800082c:	10310000 	.word	0x10310000
 8000830:	40010800 	.word	0x40010800

08000834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000838:	b672      	cpsid	i
}
 800083a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800083c:	e7fe      	b.n	800083c <Error_Handler+0x8>
	...

08000840 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000846:	4b15      	ldr	r3, [pc, #84]	; (800089c <HAL_MspInit+0x5c>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	4a14      	ldr	r2, [pc, #80]	; (800089c <HAL_MspInit+0x5c>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6193      	str	r3, [r2, #24]
 8000852:	4b12      	ldr	r3, [pc, #72]	; (800089c <HAL_MspInit+0x5c>)
 8000854:	699b      	ldr	r3, [r3, #24]
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085e:	4b0f      	ldr	r3, [pc, #60]	; (800089c <HAL_MspInit+0x5c>)
 8000860:	69db      	ldr	r3, [r3, #28]
 8000862:	4a0e      	ldr	r2, [pc, #56]	; (800089c <HAL_MspInit+0x5c>)
 8000864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000868:	61d3      	str	r3, [r2, #28]
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <HAL_MspInit+0x5c>)
 800086c:	69db      	ldr	r3, [r3, #28]
 800086e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000876:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <HAL_MspInit+0x60>)
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	4a04      	ldr	r2, [pc, #16]	; (80008a0 <HAL_MspInit+0x60>)
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000892:	bf00      	nop
 8000894:	3714      	adds	r7, #20
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr
 800089c:	40021000 	.word	0x40021000
 80008a0:	40010000 	.word	0x40010000

080008a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 0310 	add.w	r3, r7, #16
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a14      	ldr	r2, [pc, #80]	; (8000910 <HAL_ADC_MspInit+0x6c>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d121      	bne.n	8000908 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008c4:	4b13      	ldr	r3, [pc, #76]	; (8000914 <HAL_ADC_MspInit+0x70>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	4a12      	ldr	r2, [pc, #72]	; (8000914 <HAL_ADC_MspInit+0x70>)
 80008ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008ce:	6193      	str	r3, [r2, #24]
 80008d0:	4b10      	ldr	r3, [pc, #64]	; (8000914 <HAL_ADC_MspInit+0x70>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008dc:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <HAL_ADC_MspInit+0x70>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	4a0c      	ldr	r2, [pc, #48]	; (8000914 <HAL_ADC_MspInit+0x70>)
 80008e2:	f043 0304 	orr.w	r3, r3, #4
 80008e6:	6193      	str	r3, [r2, #24]
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <HAL_ADC_MspInit+0x70>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	f003 0304 	and.w	r3, r3, #4
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008f4:	2308      	movs	r3, #8
 80008f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008f8:	2303      	movs	r3, #3
 80008fa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 0310 	add.w	r3, r7, #16
 8000900:	4619      	mov	r1, r3
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <HAL_ADC_MspInit+0x74>)
 8000904:	f001 fc34 	bl	8002170 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000908:	bf00      	nop
 800090a:	3720      	adds	r7, #32
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40012400 	.word	0x40012400
 8000914:	40021000 	.word	0x40021000
 8000918:	40010800 	.word	0x40010800

0800091c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b088      	sub	sp, #32
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a20      	ldr	r2, [pc, #128]	; (80009b8 <HAL_CAN_MspInit+0x9c>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d139      	bne.n	80009b0 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800093c:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <HAL_CAN_MspInit+0xa0>)
 800093e:	69db      	ldr	r3, [r3, #28]
 8000940:	4a1e      	ldr	r2, [pc, #120]	; (80009bc <HAL_CAN_MspInit+0xa0>)
 8000942:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000946:	61d3      	str	r3, [r2, #28]
 8000948:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <HAL_CAN_MspInit+0xa0>)
 800094a:	69db      	ldr	r3, [r3, #28]
 800094c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000954:	4b19      	ldr	r3, [pc, #100]	; (80009bc <HAL_CAN_MspInit+0xa0>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	4a18      	ldr	r2, [pc, #96]	; (80009bc <HAL_CAN_MspInit+0xa0>)
 800095a:	f043 0304 	orr.w	r3, r3, #4
 800095e:	6193      	str	r3, [r2, #24]
 8000960:	4b16      	ldr	r3, [pc, #88]	; (80009bc <HAL_CAN_MspInit+0xa0>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	f003 0304 	and.w	r3, r3, #4
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800096c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000970:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	f107 0310 	add.w	r3, r7, #16
 800097e:	4619      	mov	r1, r3
 8000980:	480f      	ldr	r0, [pc, #60]	; (80009c0 <HAL_CAN_MspInit+0xa4>)
 8000982:	f001 fbf5 	bl	8002170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800098a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000990:	2303      	movs	r3, #3
 8000992:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	4619      	mov	r1, r3
 800099a:	4809      	ldr	r0, [pc, #36]	; (80009c0 <HAL_CAN_MspInit+0xa4>)
 800099c:	f001 fbe8 	bl	8002170 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2100      	movs	r1, #0
 80009a4:	2015      	movs	r0, #21
 80009a6:	f001 fbac 	bl	8002102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80009aa:	2015      	movs	r0, #21
 80009ac:	f001 fbc5 	bl	800213a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80009b0:	bf00      	nop
 80009b2:	3720      	adds	r7, #32
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40006400 	.word	0x40006400
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40010800 	.word	0x40010800

080009c4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009d4:	d10b      	bne.n	80009ee <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <HAL_TIM_PWM_MspInit+0x34>)
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	4a07      	ldr	r2, [pc, #28]	; (80009f8 <HAL_TIM_PWM_MspInit+0x34>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	61d3      	str	r3, [r2, #28]
 80009e2:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <HAL_TIM_PWM_MspInit+0x34>)
 80009e4:	69db      	ldr	r3, [r3, #28]
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009ee:	bf00      	nop
 80009f0:	3714      	adds	r7, #20
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr
 80009f8:	40021000 	.word	0x40021000

080009fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	; 0x28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a1a:	d142      	bne.n	8000aa2 <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1c:	4b23      	ldr	r3, [pc, #140]	; (8000aac <HAL_TIM_MspPostInit+0xb0>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	4a22      	ldr	r2, [pc, #136]	; (8000aac <HAL_TIM_MspPostInit+0xb0>)
 8000a22:	f043 0304 	orr.w	r3, r3, #4
 8000a26:	6193      	str	r3, [r2, #24]
 8000a28:	4b20      	ldr	r3, [pc, #128]	; (8000aac <HAL_TIM_MspPostInit+0xb0>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	f003 0304 	and.w	r3, r3, #4
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a34:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <HAL_TIM_MspPostInit+0xb0>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	4a1c      	ldr	r2, [pc, #112]	; (8000aac <HAL_TIM_MspPostInit+0xb0>)
 8000a3a:	f043 0308 	orr.w	r3, r3, #8
 8000a3e:	6193      	str	r3, [r2, #24]
 8000a40:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <HAL_TIM_MspPostInit+0xb0>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	f003 0308 	and.w	r3, r3, #8
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2302      	movs	r3, #2
 8000a58:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4813      	ldr	r0, [pc, #76]	; (8000ab0 <HAL_TIM_MspPostInit+0xb4>)
 8000a62:	f001 fb85 	bl	8002170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a66:	2308      	movs	r3, #8
 8000a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4619      	mov	r1, r3
 8000a78:	480e      	ldr	r0, [pc, #56]	; (8000ab4 <HAL_TIM_MspPostInit+0xb8>)
 8000a7a:	f001 fb79 	bl	8002170 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <HAL_TIM_MspPostInit+0xbc>)
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
 8000a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
 8000a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a9c:	4a06      	ldr	r2, [pc, #24]	; (8000ab8 <HAL_TIM_MspPostInit+0xbc>)
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa0:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000aa2:	bf00      	nop
 8000aa4:	3728      	adds	r7, #40	; 0x28
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40010800 	.word	0x40010800
 8000ab4:	40010c00 	.word	0x40010c00
 8000ab8:	40010000 	.word	0x40010000

08000abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <NMI_Handler+0x4>

08000ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <HardFault_Handler+0x4>

08000ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <MemManage_Handler+0x4>

08000ace <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <BusFault_Handler+0x4>

08000ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <UsageFault_Handler+0x4>

08000ada <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr

08000ae6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr

08000af2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr

08000afe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b02:	f000 f88d 	bl	8000c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b0e:	2001      	movs	r0, #1
 8000b10:	f001 fce2 	bl	80024d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000b1c:	2002      	movs	r0, #2
 8000b1e:	f001 fcdb 	bl	80024d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <CAN1_RX1_IRQHandler+0x10>)
 8000b2e:	f000 ffe5 	bl	8001afc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000048 	.word	0x20000048

08000b3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr

08000b48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b48:	f7ff fff8 	bl	8000b3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b4c:	480b      	ldr	r0, [pc, #44]	; (8000b7c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b4e:	490c      	ldr	r1, [pc, #48]	; (8000b80 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b50:	4a0c      	ldr	r2, [pc, #48]	; (8000b84 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b54:	e002      	b.n	8000b5c <LoopCopyDataInit>

08000b56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5a:	3304      	adds	r3, #4

08000b5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b60:	d3f9      	bcc.n	8000b56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b62:	4a09      	ldr	r2, [pc, #36]	; (8000b88 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b64:	4c09      	ldr	r4, [pc, #36]	; (8000b8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b68:	e001      	b.n	8000b6e <LoopFillZerobss>

08000b6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b6c:	3204      	adds	r2, #4

08000b6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b70:	d3fb      	bcc.n	8000b6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b72:	f002 fe5b 	bl	800382c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b76:	f7ff fbeb 	bl	8000350 <main>
  bx lr
 8000b7a:	4770      	bx	lr
  ldr r0, =_sdata
 8000b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b80:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b84:	080038e4 	.word	0x080038e4
  ldr r2, =_sbss
 8000b88:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b8c:	200000ec 	.word	0x200000ec

08000b90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b90:	e7fe      	b.n	8000b90 <ADC1_2_IRQHandler>
	...

08000b94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <HAL_Init+0x28>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a07      	ldr	r2, [pc, #28]	; (8000bbc <HAL_Init+0x28>)
 8000b9e:	f043 0310 	orr.w	r3, r3, #16
 8000ba2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	f001 faa1 	bl	80020ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000baa:	2000      	movs	r0, #0
 8000bac:	f000 f808 	bl	8000bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb0:	f7ff fe46 	bl	8000840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40022000 	.word	0x40022000

08000bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <HAL_InitTick+0x54>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_InitTick+0x58>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bde:	4618      	mov	r0, r3
 8000be0:	f001 fab9 	bl	8002156 <HAL_SYSTICK_Config>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e00e      	b.n	8000c0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2b0f      	cmp	r3, #15
 8000bf2:	d80a      	bhi.n	8000c0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	6879      	ldr	r1, [r7, #4]
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	f001 fa81 	bl	8002102 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c00:	4a06      	ldr	r2, [pc, #24]	; (8000c1c <HAL_InitTick+0x5c>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c06:	2300      	movs	r3, #0
 8000c08:	e000      	b.n	8000c0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000008 	.word	0x20000008
 8000c18:	20000010 	.word	0x20000010
 8000c1c:	2000000c 	.word	0x2000000c

08000c20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <HAL_IncTick+0x1c>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <HAL_IncTick+0x20>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	4a03      	ldr	r2, [pc, #12]	; (8000c40 <HAL_IncTick+0x20>)
 8000c32:	6013      	str	r3, [r2, #0]
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr
 8000c3c:	20000010 	.word	0x20000010
 8000c40:	200000e8 	.word	0x200000e8

08000c44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return uwTick;
 8000c48:	4b02      	ldr	r3, [pc, #8]	; (8000c54 <HAL_GetTick+0x10>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr
 8000c54:	200000e8 	.word	0x200000e8

08000c58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c60:	f7ff fff0 	bl	8000c44 <HAL_GetTick>
 8000c64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c70:	d005      	beq.n	8000c7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c72:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <HAL_Delay+0x44>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	461a      	mov	r2, r3
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c7e:	bf00      	nop
 8000c80:	f7ff ffe0 	bl	8000c44 <HAL_GetTick>
 8000c84:	4602      	mov	r2, r0
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d8f7      	bhi.n	8000c80 <HAL_Delay+0x28>
  {
  }
}
 8000c90:	bf00      	nop
 8000c92:	bf00      	nop
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000010 	.word	0x20000010

08000ca0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000cac:	2300      	movs	r3, #0
 8000cae:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d101      	bne.n	8000cc2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e0be      	b.n	8000e40 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d109      	bne.n	8000ce4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff fde0 	bl	80008a4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f000 fbf1 	bl	80014cc <ADC_ConversionStop_Disable>
 8000cea:	4603      	mov	r3, r0
 8000cec:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf2:	f003 0310 	and.w	r3, r3, #16
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f040 8099 	bne.w	8000e2e <HAL_ADC_Init+0x18e>
 8000cfc:	7dfb      	ldrb	r3, [r7, #23]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f040 8095 	bne.w	8000e2e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d08:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d0c:	f023 0302 	bic.w	r3, r3, #2
 8000d10:	f043 0202 	orr.w	r2, r3, #2
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d20:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	7b1b      	ldrb	r3, [r3, #12]
 8000d26:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d28:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d38:	d003      	beq.n	8000d42 <HAL_ADC_Init+0xa2>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d102      	bne.n	8000d48 <HAL_ADC_Init+0xa8>
 8000d42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d46:	e000      	b.n	8000d4a <HAL_ADC_Init+0xaa>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	7d1b      	ldrb	r3, [r3, #20]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d119      	bne.n	8000d8c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	7b1b      	ldrb	r3, [r3, #12]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d109      	bne.n	8000d74 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	3b01      	subs	r3, #1
 8000d66:	035a      	lsls	r2, r3, #13
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d70:	613b      	str	r3, [r7, #16]
 8000d72:	e00b      	b.n	8000d8c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d78:	f043 0220 	orr.w	r2, r3, #32
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d84:	f043 0201 	orr.w	r2, r3, #1
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	689a      	ldr	r2, [r3, #8]
 8000da6:	4b28      	ldr	r3, [pc, #160]	; (8000e48 <HAL_ADC_Init+0x1a8>)
 8000da8:	4013      	ands	r3, r2
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	6812      	ldr	r2, [r2, #0]
 8000dae:	68b9      	ldr	r1, [r7, #8]
 8000db0:	430b      	orrs	r3, r1
 8000db2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000dbc:	d003      	beq.n	8000dc6 <HAL_ADC_Init+0x126>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d104      	bne.n	8000dd0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	691b      	ldr	r3, [r3, #16]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	051b      	lsls	r3, r3, #20
 8000dce:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	430a      	orrs	r2, r1
 8000de2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	689a      	ldr	r2, [r3, #8]
 8000dea:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <HAL_ADC_Init+0x1ac>)
 8000dec:	4013      	ands	r3, r2
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d10b      	bne.n	8000e0c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dfe:	f023 0303 	bic.w	r3, r3, #3
 8000e02:	f043 0201 	orr.w	r2, r3, #1
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e0a:	e018      	b.n	8000e3e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e10:	f023 0312 	bic.w	r3, r3, #18
 8000e14:	f043 0210 	orr.w	r2, r3, #16
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e20:	f043 0201 	orr.w	r2, r3, #1
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e2c:	e007      	b.n	8000e3e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e32:	f043 0210 	orr.w	r2, r3, #16
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	ffe1f7fd 	.word	0xffe1f7fd
 8000e4c:	ff1f0efe 	.word	0xff1f0efe

08000e50 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d101      	bne.n	8000e6a <HAL_ADC_Start+0x1a>
 8000e66:	2302      	movs	r3, #2
 8000e68:	e098      	b.n	8000f9c <HAL_ADC_Start+0x14c>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f000 fad0 	bl	8001418 <ADC_Enable>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	f040 8087 	bne.w	8000f92 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e8c:	f023 0301 	bic.w	r3, r3, #1
 8000e90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a41      	ldr	r2, [pc, #260]	; (8000fa4 <HAL_ADC_Start+0x154>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d105      	bne.n	8000eae <HAL_ADC_Start+0x5e>
 8000ea2:	4b41      	ldr	r3, [pc, #260]	; (8000fa8 <HAL_ADC_Start+0x158>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d115      	bne.n	8000eda <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d026      	beq.n	8000f16 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ecc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ed0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ed8:	e01d      	b.n	8000f16 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ede:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a2f      	ldr	r2, [pc, #188]	; (8000fa8 <HAL_ADC_Start+0x158>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d004      	beq.n	8000efa <HAL_ADC_Start+0xaa>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a2b      	ldr	r2, [pc, #172]	; (8000fa4 <HAL_ADC_Start+0x154>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d10d      	bne.n	8000f16 <HAL_ADC_Start+0xc6>
 8000efa:	4b2b      	ldr	r3, [pc, #172]	; (8000fa8 <HAL_ADC_Start+0x158>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d007      	beq.n	8000f16 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f0e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d006      	beq.n	8000f30 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f26:	f023 0206 	bic.w	r2, r3, #6
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f2e:	e002      	b.n	8000f36 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2200      	movs	r2, #0
 8000f34:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f06f 0202 	mvn.w	r2, #2
 8000f46:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f52:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f56:	d113      	bne.n	8000f80 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f5c:	4a11      	ldr	r2, [pc, #68]	; (8000fa4 <HAL_ADC_Start+0x154>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d105      	bne.n	8000f6e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <HAL_ADC_Start+0x158>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d108      	bne.n	8000f80 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	e00c      	b.n	8000f9a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	689a      	ldr	r2, [r3, #8]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	e003      	b.n	8000f9a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40012800 	.word	0x40012800
 8000fa8:	40012400 	.word	0x40012400

08000fac <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d101      	bne.n	8000fc6 <HAL_ADC_Stop+0x1a>
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	e01a      	b.n	8000ffc <HAL_ADC_Stop+0x50>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f000 fa7c 	bl	80014cc <ADC_ConversionStop_Disable>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d109      	bne.n	8000ff2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fe6:	f023 0301 	bic.w	r3, r3, #1
 8000fea:	f043 0201 	orr.w	r2, r3, #1
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001004:	b590      	push	{r4, r7, lr}
 8001006:	b087      	sub	sp, #28
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800101a:	f7ff fe13 	bl	8000c44 <HAL_GetTick>
 800101e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800102a:	2b00      	cmp	r3, #0
 800102c:	d00b      	beq.n	8001046 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001032:	f043 0220 	orr.w	r2, r3, #32
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e0d3      	b.n	80011ee <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001050:	2b00      	cmp	r3, #0
 8001052:	d131      	bne.n	80010b8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800105e:	2b00      	cmp	r3, #0
 8001060:	d12a      	bne.n	80010b8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001062:	e021      	b.n	80010a8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800106a:	d01d      	beq.n	80010a8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d007      	beq.n	8001082 <HAL_ADC_PollForConversion+0x7e>
 8001072:	f7ff fde7 	bl	8000c44 <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	429a      	cmp	r2, r3
 8001080:	d212      	bcs.n	80010a8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d10b      	bne.n	80010a8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001094:	f043 0204 	orr.w	r2, r3, #4
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e0a2      	b.n	80011ee <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d0d6      	beq.n	8001064 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80010b6:	e070      	b.n	800119a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80010b8:	4b4f      	ldr	r3, [pc, #316]	; (80011f8 <HAL_ADC_PollForConversion+0x1f4>)
 80010ba:	681c      	ldr	r4, [r3, #0]
 80010bc:	2002      	movs	r0, #2
 80010be:	f001 fed3 	bl	8002e68 <HAL_RCCEx_GetPeriphCLKFreq>
 80010c2:	4603      	mov	r3, r0
 80010c4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6919      	ldr	r1, [r3, #16]
 80010ce:	4b4b      	ldr	r3, [pc, #300]	; (80011fc <HAL_ADC_PollForConversion+0x1f8>)
 80010d0:	400b      	ands	r3, r1
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d118      	bne.n	8001108 <HAL_ADC_PollForConversion+0x104>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	68d9      	ldr	r1, [r3, #12]
 80010dc:	4b48      	ldr	r3, [pc, #288]	; (8001200 <HAL_ADC_PollForConversion+0x1fc>)
 80010de:	400b      	ands	r3, r1
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d111      	bne.n	8001108 <HAL_ADC_PollForConversion+0x104>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6919      	ldr	r1, [r3, #16]
 80010ea:	4b46      	ldr	r3, [pc, #280]	; (8001204 <HAL_ADC_PollForConversion+0x200>)
 80010ec:	400b      	ands	r3, r1
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d108      	bne.n	8001104 <HAL_ADC_PollForConversion+0x100>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	68d9      	ldr	r1, [r3, #12]
 80010f8:	4b43      	ldr	r3, [pc, #268]	; (8001208 <HAL_ADC_PollForConversion+0x204>)
 80010fa:	400b      	ands	r3, r1
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d101      	bne.n	8001104 <HAL_ADC_PollForConversion+0x100>
 8001100:	2314      	movs	r3, #20
 8001102:	e020      	b.n	8001146 <HAL_ADC_PollForConversion+0x142>
 8001104:	2329      	movs	r3, #41	; 0x29
 8001106:	e01e      	b.n	8001146 <HAL_ADC_PollForConversion+0x142>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	6919      	ldr	r1, [r3, #16]
 800110e:	4b3d      	ldr	r3, [pc, #244]	; (8001204 <HAL_ADC_PollForConversion+0x200>)
 8001110:	400b      	ands	r3, r1
 8001112:	2b00      	cmp	r3, #0
 8001114:	d106      	bne.n	8001124 <HAL_ADC_PollForConversion+0x120>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	68d9      	ldr	r1, [r3, #12]
 800111c:	4b3a      	ldr	r3, [pc, #232]	; (8001208 <HAL_ADC_PollForConversion+0x204>)
 800111e:	400b      	ands	r3, r1
 8001120:	2b00      	cmp	r3, #0
 8001122:	d00d      	beq.n	8001140 <HAL_ADC_PollForConversion+0x13c>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6919      	ldr	r1, [r3, #16]
 800112a:	4b38      	ldr	r3, [pc, #224]	; (800120c <HAL_ADC_PollForConversion+0x208>)
 800112c:	400b      	ands	r3, r1
 800112e:	2b00      	cmp	r3, #0
 8001130:	d108      	bne.n	8001144 <HAL_ADC_PollForConversion+0x140>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	68d9      	ldr	r1, [r3, #12]
 8001138:	4b34      	ldr	r3, [pc, #208]	; (800120c <HAL_ADC_PollForConversion+0x208>)
 800113a:	400b      	ands	r3, r1
 800113c:	2b00      	cmp	r3, #0
 800113e:	d101      	bne.n	8001144 <HAL_ADC_PollForConversion+0x140>
 8001140:	2354      	movs	r3, #84	; 0x54
 8001142:	e000      	b.n	8001146 <HAL_ADC_PollForConversion+0x142>
 8001144:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001146:	fb02 f303 	mul.w	r3, r2, r3
 800114a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800114c:	e021      	b.n	8001192 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001154:	d01a      	beq.n	800118c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d007      	beq.n	800116c <HAL_ADC_PollForConversion+0x168>
 800115c:	f7ff fd72 	bl	8000c44 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	683a      	ldr	r2, [r7, #0]
 8001168:	429a      	cmp	r2, r3
 800116a:	d20f      	bcs.n	800118c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	429a      	cmp	r2, r3
 8001172:	d90b      	bls.n	800118c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001178:	f043 0204 	orr.w	r2, r3, #4
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e030      	b.n	80011ee <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	3301      	adds	r3, #1
 8001190:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	429a      	cmp	r2, r3
 8001198:	d8d9      	bhi.n	800114e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f06f 0212 	mvn.w	r2, #18
 80011a2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80011ba:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80011be:	d115      	bne.n	80011ec <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d111      	bne.n	80011ec <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d105      	bne.n	80011ec <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e4:	f043 0201 	orr.w	r2, r3, #1
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	371c      	adds	r7, #28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd90      	pop	{r4, r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000008 	.word	0x20000008
 80011fc:	24924924 	.word	0x24924924
 8001200:	00924924 	.word	0x00924924
 8001204:	12492492 	.word	0x12492492
 8001208:	00492492 	.word	0x00492492
 800120c:	00249249 	.word	0x00249249

08001210 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800121e:	4618      	mov	r0, r3
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr

08001228 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001240:	2b01      	cmp	r3, #1
 8001242:	d101      	bne.n	8001248 <HAL_ADC_ConfigChannel+0x20>
 8001244:	2302      	movs	r3, #2
 8001246:	e0dc      	b.n	8001402 <HAL_ADC_ConfigChannel+0x1da>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2201      	movs	r2, #1
 800124c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b06      	cmp	r3, #6
 8001256:	d81c      	bhi.n	8001292 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	4613      	mov	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4413      	add	r3, r2
 8001268:	3b05      	subs	r3, #5
 800126a:	221f      	movs	r2, #31
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	4019      	ands	r1, r3
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	6818      	ldr	r0, [r3, #0]
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	3b05      	subs	r3, #5
 8001284:	fa00 f203 	lsl.w	r2, r0, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	430a      	orrs	r2, r1
 800128e:	635a      	str	r2, [r3, #52]	; 0x34
 8001290:	e03c      	b.n	800130c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	2b0c      	cmp	r3, #12
 8001298:	d81c      	bhi.n	80012d4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	4613      	mov	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	3b23      	subs	r3, #35	; 0x23
 80012ac:	221f      	movs	r2, #31
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	4019      	ands	r1, r3
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	6818      	ldr	r0, [r3, #0]
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	4613      	mov	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	3b23      	subs	r3, #35	; 0x23
 80012c6:	fa00 f203 	lsl.w	r2, r0, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	430a      	orrs	r2, r1
 80012d0:	631a      	str	r2, [r3, #48]	; 0x30
 80012d2:	e01b      	b.n	800130c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	4613      	mov	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	3b41      	subs	r3, #65	; 0x41
 80012e6:	221f      	movs	r2, #31
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	4019      	ands	r1, r3
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	6818      	ldr	r0, [r3, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	4613      	mov	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	3b41      	subs	r3, #65	; 0x41
 8001300:	fa00 f203 	lsl.w	r2, r0, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	430a      	orrs	r2, r1
 800130a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b09      	cmp	r3, #9
 8001312:	d91c      	bls.n	800134e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	68d9      	ldr	r1, [r3, #12]
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	4613      	mov	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	4413      	add	r3, r2
 8001324:	3b1e      	subs	r3, #30
 8001326:	2207      	movs	r2, #7
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	4019      	ands	r1, r3
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	6898      	ldr	r0, [r3, #8]
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4613      	mov	r3, r2
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	4413      	add	r3, r2
 800133e:	3b1e      	subs	r3, #30
 8001340:	fa00 f203 	lsl.w	r2, r0, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	430a      	orrs	r2, r1
 800134a:	60da      	str	r2, [r3, #12]
 800134c:	e019      	b.n	8001382 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	6919      	ldr	r1, [r3, #16]
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4613      	mov	r3, r2
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	4413      	add	r3, r2
 800135e:	2207      	movs	r2, #7
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	4019      	ands	r1, r3
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	6898      	ldr	r0, [r3, #8]
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4613      	mov	r3, r2
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	4413      	add	r3, r2
 8001376:	fa00 f203 	lsl.w	r2, r0, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	430a      	orrs	r2, r1
 8001380:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b10      	cmp	r3, #16
 8001388:	d003      	beq.n	8001392 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800138e:	2b11      	cmp	r3, #17
 8001390:	d132      	bne.n	80013f8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a1d      	ldr	r2, [pc, #116]	; (800140c <HAL_ADC_ConfigChannel+0x1e4>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d125      	bne.n	80013e8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d126      	bne.n	80013f8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80013b8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b10      	cmp	r3, #16
 80013c0:	d11a      	bne.n	80013f8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013c2:	4b13      	ldr	r3, [pc, #76]	; (8001410 <HAL_ADC_ConfigChannel+0x1e8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a13      	ldr	r2, [pc, #76]	; (8001414 <HAL_ADC_ConfigChannel+0x1ec>)
 80013c8:	fba2 2303 	umull	r2, r3, r2, r3
 80013cc:	0c9a      	lsrs	r2, r3, #18
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013d8:	e002      	b.n	80013e0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	3b01      	subs	r3, #1
 80013de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f9      	bne.n	80013da <HAL_ADC_ConfigChannel+0x1b2>
 80013e6:	e007      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ec:	f043 0220 	orr.w	r2, r3, #32
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001400:	7bfb      	ldrb	r3, [r7, #15]
}
 8001402:	4618      	mov	r0, r3
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	40012400 	.word	0x40012400
 8001410:	20000008 	.word	0x20000008
 8001414:	431bde83 	.word	0x431bde83

08001418 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b01      	cmp	r3, #1
 8001434:	d040      	beq.n	80014b8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f042 0201 	orr.w	r2, r2, #1
 8001444:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001446:	4b1f      	ldr	r3, [pc, #124]	; (80014c4 <ADC_Enable+0xac>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a1f      	ldr	r2, [pc, #124]	; (80014c8 <ADC_Enable+0xb0>)
 800144c:	fba2 2303 	umull	r2, r3, r2, r3
 8001450:	0c9b      	lsrs	r3, r3, #18
 8001452:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001454:	e002      	b.n	800145c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	3b01      	subs	r3, #1
 800145a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f9      	bne.n	8001456 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001462:	f7ff fbef 	bl	8000c44 <HAL_GetTick>
 8001466:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001468:	e01f      	b.n	80014aa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800146a:	f7ff fbeb 	bl	8000c44 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d918      	bls.n	80014aa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b01      	cmp	r3, #1
 8001484:	d011      	beq.n	80014aa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148a:	f043 0210 	orr.w	r2, r3, #16
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001496:	f043 0201 	orr.w	r2, r3, #1
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e007      	b.n	80014ba <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d1d8      	bne.n	800146a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000008 	.word	0x20000008
 80014c8:	431bde83 	.word	0x431bde83

080014cc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014d4:	2300      	movs	r3, #0
 80014d6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d12e      	bne.n	8001544 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 0201 	bic.w	r2, r2, #1
 80014f4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014f6:	f7ff fba5 	bl	8000c44 <HAL_GetTick>
 80014fa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80014fc:	e01b      	b.n	8001536 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80014fe:	f7ff fba1 	bl	8000c44 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d914      	bls.n	8001536 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b01      	cmp	r3, #1
 8001518:	d10d      	bne.n	8001536 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800151e:	f043 0210 	orr.w	r2, r3, #16
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152a:	f043 0201 	orr.w	r2, r3, #1
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e007      	b.n	8001546 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	2b01      	cmp	r3, #1
 8001542:	d0dc      	beq.n	80014fe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b084      	sub	sp, #16
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e0ed      	b.n	800173c <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	d102      	bne.n	8001572 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff f9d5 	bl	800091c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f042 0201 	orr.w	r2, r2, #1
 8001580:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001582:	f7ff fb5f 	bl	8000c44 <HAL_GetTick>
 8001586:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001588:	e012      	b.n	80015b0 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800158a:	f7ff fb5b 	bl	8000c44 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b0a      	cmp	r3, #10
 8001596:	d90b      	bls.n	80015b0 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2205      	movs	r2, #5
 80015a8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e0c5      	b.n	800173c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0e5      	beq.n	800158a <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f022 0202 	bic.w	r2, r2, #2
 80015cc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015ce:	f7ff fb39 	bl	8000c44 <HAL_GetTick>
 80015d2:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015d4:	e012      	b.n	80015fc <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015d6:	f7ff fb35 	bl	8000c44 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b0a      	cmp	r3, #10
 80015e2:	d90b      	bls.n	80015fc <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2205      	movs	r2, #5
 80015f4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e09f      	b.n	800173c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1e5      	bne.n	80015d6 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	7e1b      	ldrb	r3, [r3, #24]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d108      	bne.n	8001624 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	e007      	b.n	8001634 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001632:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	7e5b      	ldrb	r3, [r3, #25]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d108      	bne.n	800164e <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	e007      	b.n	800165e <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800165c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	7e9b      	ldrb	r3, [r3, #26]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d108      	bne.n	8001678 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f042 0220 	orr.w	r2, r2, #32
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	e007      	b.n	8001688 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 0220 	bic.w	r2, r2, #32
 8001686:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	7edb      	ldrb	r3, [r3, #27]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d108      	bne.n	80016a2 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 0210 	bic.w	r2, r2, #16
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	e007      	b.n	80016b2 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f042 0210 	orr.w	r2, r2, #16
 80016b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	7f1b      	ldrb	r3, [r3, #28]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d108      	bne.n	80016cc <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f042 0208 	orr.w	r2, r2, #8
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	e007      	b.n	80016dc <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0208 	bic.w	r2, r2, #8
 80016da:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	7f5b      	ldrb	r3, [r3, #29]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d108      	bne.n	80016f6 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0204 	orr.w	r2, r2, #4
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	e007      	b.n	8001706 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0204 	bic.w	r2, r2, #4
 8001704:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	431a      	orrs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	431a      	orrs	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	ea42 0103 	orr.w	r1, r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	1e5a      	subs	r2, r3, #1
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2201      	movs	r2, #1
 8001736:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001744:	b480      	push	{r7}
 8001746:	b087      	sub	sp, #28
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 3020 	ldrb.w	r3, [r3, #32]
 800175a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800175c:	7cfb      	ldrb	r3, [r7, #19]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d003      	beq.n	800176a <HAL_CAN_ConfigFilter+0x26>
 8001762:	7cfb      	ldrb	r3, [r7, #19]
 8001764:	2b02      	cmp	r3, #2
 8001766:	f040 80aa 	bne.w	80018be <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001770:	f043 0201 	orr.w	r2, r3, #1
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	f003 031f 	and.w	r3, r3, #31
 8001782:	2201      	movs	r2, #1
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	43db      	mvns	r3, r3
 8001794:	401a      	ands	r2, r3
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	69db      	ldr	r3, [r3, #28]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d123      	bne.n	80017ec <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	401a      	ands	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017c6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	3248      	adds	r2, #72	; 0x48
 80017cc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017e0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017e2:	6979      	ldr	r1, [r7, #20]
 80017e4:	3348      	adds	r3, #72	; 0x48
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	440b      	add	r3, r1
 80017ea:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	69db      	ldr	r3, [r3, #28]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d122      	bne.n	800183a <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	431a      	orrs	r2, r3
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001814:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	3248      	adds	r2, #72	; 0x48
 800181a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800182e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001830:	6979      	ldr	r1, [r7, #20]
 8001832:	3348      	adds	r3, #72	; 0x48
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	440b      	add	r3, r1
 8001838:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d109      	bne.n	8001856 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	43db      	mvns	r3, r3
 800184c:	401a      	ands	r2, r3
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001854:	e007      	b.n	8001866 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	431a      	orrs	r2, r3
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d109      	bne.n	8001882 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	43db      	mvns	r3, r3
 8001878:	401a      	ands	r2, r3
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001880:	e007      	b.n	8001892 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	431a      	orrs	r2, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d107      	bne.n	80018aa <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	431a      	orrs	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018b0:	f023 0201 	bic.w	r2, r3, #1
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	e006      	b.n	80018cc <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
  }
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	371c      	adds	r7, #28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr

080018d6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b084      	sub	sp, #16
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d12e      	bne.n	8001948 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2202      	movs	r2, #2
 80018ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 0201 	bic.w	r2, r2, #1
 8001900:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001902:	f7ff f99f 	bl	8000c44 <HAL_GetTick>
 8001906:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001908:	e012      	b.n	8001930 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800190a:	f7ff f99b 	bl	8000c44 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b0a      	cmp	r3, #10
 8001916:	d90b      	bls.n	8001930 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2205      	movs	r2, #5
 8001928:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e012      	b.n	8001956 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1e5      	bne.n	800190a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001944:	2300      	movs	r3, #0
 8001946:	e006      	b.n	8001956 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
  }
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800195e:	b480      	push	{r7}
 8001960:	b089      	sub	sp, #36	; 0x24
 8001962:	af00      	add	r7, sp, #0
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
 800196a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001972:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800197c:	7ffb      	ldrb	r3, [r7, #31]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d003      	beq.n	800198a <HAL_CAN_AddTxMessage+0x2c>
 8001982:	7ffb      	ldrb	r3, [r7, #31]
 8001984:	2b02      	cmp	r3, #2
 8001986:	f040 80ad 	bne.w	8001ae4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d10a      	bne.n	80019aa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800199a:	2b00      	cmp	r3, #0
 800199c:	d105      	bne.n	80019aa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 8095 	beq.w	8001ad4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	0e1b      	lsrs	r3, r3, #24
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80019b4:	2201      	movs	r2, #1
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	409a      	lsls	r2, r3
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d10d      	bne.n	80019e2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80019d0:	68f9      	ldr	r1, [r7, #12]
 80019d2:	6809      	ldr	r1, [r1, #0]
 80019d4:	431a      	orrs	r2, r3
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	3318      	adds	r3, #24
 80019da:	011b      	lsls	r3, r3, #4
 80019dc:	440b      	add	r3, r1
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	e00f      	b.n	8001a02 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019ec:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019f2:	68f9      	ldr	r1, [r7, #12]
 80019f4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80019f6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	3318      	adds	r3, #24
 80019fc:	011b      	lsls	r3, r3, #4
 80019fe:	440b      	add	r3, r1
 8001a00:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6819      	ldr	r1, [r3, #0]
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	691a      	ldr	r2, [r3, #16]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	3318      	adds	r3, #24
 8001a0e:	011b      	lsls	r3, r3, #4
 8001a10:	440b      	add	r3, r1
 8001a12:	3304      	adds	r3, #4
 8001a14:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	7d1b      	ldrb	r3, [r3, #20]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d111      	bne.n	8001a42 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	3318      	adds	r3, #24
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	4413      	add	r3, r2
 8001a2a:	3304      	adds	r3, #4
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	6811      	ldr	r1, [r2, #0]
 8001a32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	3318      	adds	r3, #24
 8001a3a:	011b      	lsls	r3, r3, #4
 8001a3c:	440b      	add	r3, r1
 8001a3e:	3304      	adds	r3, #4
 8001a40:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3307      	adds	r3, #7
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	061a      	lsls	r2, r3, #24
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3306      	adds	r3, #6
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	041b      	lsls	r3, r3, #16
 8001a52:	431a      	orrs	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3305      	adds	r3, #5
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	021b      	lsls	r3, r3, #8
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	3204      	adds	r2, #4
 8001a62:	7812      	ldrb	r2, [r2, #0]
 8001a64:	4610      	mov	r0, r2
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	6811      	ldr	r1, [r2, #0]
 8001a6a:	ea43 0200 	orr.w	r2, r3, r0
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	011b      	lsls	r3, r3, #4
 8001a72:	440b      	add	r3, r1
 8001a74:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001a78:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3303      	adds	r3, #3
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	061a      	lsls	r2, r3, #24
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3302      	adds	r3, #2
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	041b      	lsls	r3, r3, #16
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	021b      	lsls	r3, r3, #8
 8001a94:	4313      	orrs	r3, r2
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	7812      	ldrb	r2, [r2, #0]
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	6811      	ldr	r1, [r2, #0]
 8001aa0:	ea43 0200 	orr.w	r2, r3, r0
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	011b      	lsls	r3, r3, #4
 8001aa8:	440b      	add	r3, r1
 8001aaa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001aae:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	3318      	adds	r3, #24
 8001ab8:	011b      	lsls	r3, r3, #4
 8001aba:	4413      	add	r3, r2
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	6811      	ldr	r1, [r2, #0]
 8001ac2:	f043 0201 	orr.w	r2, r3, #1
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	3318      	adds	r3, #24
 8001aca:	011b      	lsls	r3, r3, #4
 8001acc:	440b      	add	r3, r1
 8001ace:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	e00e      	b.n	8001af2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e006      	b.n	8001af2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
  }
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3724      	adds	r7, #36	; 0x24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr

08001afc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	; 0x28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001b04:	2300      	movs	r3, #0
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001b38:	6a3b      	ldr	r3, [r7, #32]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d07c      	beq.n	8001c3c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d023      	beq.n	8001b94 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2201      	movs	r2, #1
 8001b52:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f983 	bl	8001e6a <HAL_CAN_TxMailbox0CompleteCallback>
 8001b64:	e016      	b.n	8001b94 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d004      	beq.n	8001b7a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b72:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
 8001b78:	e00c      	b.n	8001b94 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	f003 0308 	and.w	r3, r3, #8
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d004      	beq.n	8001b8e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b8c:	e002      	b.n	8001b94 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f986 	bl	8001ea0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d024      	beq.n	8001be8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ba6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f962 	bl	8001e7c <HAL_CAN_TxMailbox1CompleteCallback>
 8001bb8:	e016      	b.n	8001be8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d004      	beq.n	8001bce <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
 8001bcc:	e00c      	b.n	8001be8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d004      	beq.n	8001be2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
 8001be0:	e002      	b.n	8001be8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f965 	bl	8001eb2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d024      	beq.n	8001c3c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bfa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f941 	bl	8001e8e <HAL_CAN_TxMailbox2CompleteCallback>
 8001c0c:	e016      	b.n	8001c3c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d004      	beq.n	8001c22 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c20:	e00c      	b.n	8001c3c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d004      	beq.n	8001c36 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
 8001c34:	e002      	b.n	8001c3c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f944 	bl	8001ec4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00c      	beq.n	8001c60 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	f003 0310 	and.w	r3, r3, #16
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d007      	beq.n	8001c60 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2210      	movs	r2, #16
 8001c5e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	f003 0304 	and.w	r3, r3, #4
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00b      	beq.n	8001c82 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d006      	beq.n	8001c82 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2208      	movs	r2, #8
 8001c7a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 f933 	bl	8001ee8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001c82:	6a3b      	ldr	r3, [r7, #32]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d009      	beq.n	8001ca0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d002      	beq.n	8001ca0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f91b 	bl	8001ed6 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001ca0:	6a3b      	ldr	r3, [r7, #32]
 8001ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00c      	beq.n	8001cc4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	f003 0310 	and.w	r3, r3, #16
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d007      	beq.n	8001cc4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2210      	movs	r2, #16
 8001cc2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001cc4:	6a3b      	ldr	r3, [r7, #32]
 8001cc6:	f003 0320 	and.w	r3, r3, #32
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00b      	beq.n	8001ce6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d006      	beq.n	8001ce6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2208      	movs	r2, #8
 8001cde:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 f913 	bl	8001f0c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
 8001ce8:	f003 0310 	and.w	r3, r3, #16
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d009      	beq.n	8001d04 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d002      	beq.n	8001d04 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f8fb 	bl	8001efa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001d04:	6a3b      	ldr	r3, [r7, #32]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00b      	beq.n	8001d26 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	f003 0310 	and.w	r3, r3, #16
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d006      	beq.n	8001d26 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2210      	movs	r2, #16
 8001d1e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f8fc 	bl	8001f1e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001d26:	6a3b      	ldr	r3, [r7, #32]
 8001d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00b      	beq.n	8001d48 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d006      	beq.n	8001d48 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2208      	movs	r2, #8
 8001d40:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f8f4 	bl	8001f30 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001d48:	6a3b      	ldr	r3, [r7, #32]
 8001d4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d07b      	beq.n	8001e4a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d072      	beq.n	8001e42 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d5c:	6a3b      	ldr	r3, [r7, #32]
 8001d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d008      	beq.n	8001d78 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d78:	6a3b      	ldr	r3, [r7, #32]
 8001d7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d008      	beq.n	8001d94 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	f043 0302 	orr.w	r3, r3, #2
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d008      	beq.n	8001db0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	f043 0304 	orr.w	r3, r3, #4
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001db0:	6a3b      	ldr	r3, [r7, #32]
 8001db2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d043      	beq.n	8001e42 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d03e      	beq.n	8001e42 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dca:	2b60      	cmp	r3, #96	; 0x60
 8001dcc:	d02b      	beq.n	8001e26 <HAL_CAN_IRQHandler+0x32a>
 8001dce:	2b60      	cmp	r3, #96	; 0x60
 8001dd0:	d82e      	bhi.n	8001e30 <HAL_CAN_IRQHandler+0x334>
 8001dd2:	2b50      	cmp	r3, #80	; 0x50
 8001dd4:	d022      	beq.n	8001e1c <HAL_CAN_IRQHandler+0x320>
 8001dd6:	2b50      	cmp	r3, #80	; 0x50
 8001dd8:	d82a      	bhi.n	8001e30 <HAL_CAN_IRQHandler+0x334>
 8001dda:	2b40      	cmp	r3, #64	; 0x40
 8001ddc:	d019      	beq.n	8001e12 <HAL_CAN_IRQHandler+0x316>
 8001dde:	2b40      	cmp	r3, #64	; 0x40
 8001de0:	d826      	bhi.n	8001e30 <HAL_CAN_IRQHandler+0x334>
 8001de2:	2b30      	cmp	r3, #48	; 0x30
 8001de4:	d010      	beq.n	8001e08 <HAL_CAN_IRQHandler+0x30c>
 8001de6:	2b30      	cmp	r3, #48	; 0x30
 8001de8:	d822      	bhi.n	8001e30 <HAL_CAN_IRQHandler+0x334>
 8001dea:	2b10      	cmp	r3, #16
 8001dec:	d002      	beq.n	8001df4 <HAL_CAN_IRQHandler+0x2f8>
 8001dee:	2b20      	cmp	r3, #32
 8001df0:	d005      	beq.n	8001dfe <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001df2:	e01d      	b.n	8001e30 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	f043 0308 	orr.w	r3, r3, #8
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001dfc:	e019      	b.n	8001e32 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	f043 0310 	orr.w	r3, r3, #16
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e06:	e014      	b.n	8001e32 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	f043 0320 	orr.w	r3, r3, #32
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e10:	e00f      	b.n	8001e32 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e1a:	e00a      	b.n	8001e32 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e24:	e005      	b.n	8001e32 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e2e:	e000      	b.n	8001e32 <HAL_CAN_IRQHandler+0x336>
            break;
 8001e30:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	699a      	ldr	r2, [r3, #24]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001e40:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2204      	movs	r2, #4
 8001e48:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d008      	beq.n	8001e62 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 f870 	bl	8001f42 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001e62:	bf00      	nop
 8001e64:	3728      	adds	r7, #40	; 0x28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr

08001e8e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr

08001eb2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr

08001ed6 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr

08001efa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr

08001f0c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr

08001f1e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr

08001f42 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr

08001f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f64:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <__NVIC_SetPriorityGrouping+0x44>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f70:	4013      	ands	r3, r2
 8001f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f86:	4a04      	ldr	r2, [pc, #16]	; (8001f98 <__NVIC_SetPriorityGrouping+0x44>)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	60d3      	str	r3, [r2, #12]
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa0:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	0a1b      	lsrs	r3, r3, #8
 8001fa6:	f003 0307 	and.w	r3, r3, #7
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	db0b      	blt.n	8001fe2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	f003 021f 	and.w	r2, r3, #31
 8001fd0:	4906      	ldr	r1, [pc, #24]	; (8001fec <__NVIC_EnableIRQ+0x34>)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	095b      	lsrs	r3, r3, #5
 8001fd8:	2001      	movs	r0, #1
 8001fda:	fa00 f202 	lsl.w	r2, r0, r2
 8001fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr
 8001fec:	e000e100 	.word	0xe000e100

08001ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	6039      	str	r1, [r7, #0]
 8001ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002000:	2b00      	cmp	r3, #0
 8002002:	db0a      	blt.n	800201a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	b2da      	uxtb	r2, r3
 8002008:	490c      	ldr	r1, [pc, #48]	; (800203c <__NVIC_SetPriority+0x4c>)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	0112      	lsls	r2, r2, #4
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	440b      	add	r3, r1
 8002014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002018:	e00a      	b.n	8002030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	b2da      	uxtb	r2, r3
 800201e:	4908      	ldr	r1, [pc, #32]	; (8002040 <__NVIC_SetPriority+0x50>)
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	3b04      	subs	r3, #4
 8002028:	0112      	lsls	r2, r2, #4
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	440b      	add	r3, r1
 800202e:	761a      	strb	r2, [r3, #24]
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	e000e100 	.word	0xe000e100
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002044:	b480      	push	{r7}
 8002046:	b089      	sub	sp, #36	; 0x24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f1c3 0307 	rsb	r3, r3, #7
 800205e:	2b04      	cmp	r3, #4
 8002060:	bf28      	it	cs
 8002062:	2304      	movcs	r3, #4
 8002064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	3304      	adds	r3, #4
 800206a:	2b06      	cmp	r3, #6
 800206c:	d902      	bls.n	8002074 <NVIC_EncodePriority+0x30>
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3b03      	subs	r3, #3
 8002072:	e000      	b.n	8002076 <NVIC_EncodePriority+0x32>
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002078:	f04f 32ff 	mov.w	r2, #4294967295
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43da      	mvns	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	401a      	ands	r2, r3
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800208c:	f04f 31ff 	mov.w	r1, #4294967295
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	fa01 f303 	lsl.w	r3, r1, r3
 8002096:	43d9      	mvns	r1, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800209c:	4313      	orrs	r3, r2
         );
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3724      	adds	r7, #36	; 0x24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr

080020a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020b8:	d301      	bcc.n	80020be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ba:	2301      	movs	r3, #1
 80020bc:	e00f      	b.n	80020de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020be:	4a0a      	ldr	r2, [pc, #40]	; (80020e8 <SysTick_Config+0x40>)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020c6:	210f      	movs	r1, #15
 80020c8:	f04f 30ff 	mov.w	r0, #4294967295
 80020cc:	f7ff ff90 	bl	8001ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020d0:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <SysTick_Config+0x40>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020d6:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <SysTick_Config+0x40>)
 80020d8:	2207      	movs	r2, #7
 80020da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	e000e010 	.word	0xe000e010

080020ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff ff2d 	bl	8001f54 <__NVIC_SetPriorityGrouping>
}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002102:	b580      	push	{r7, lr}
 8002104:	b086      	sub	sp, #24
 8002106:	af00      	add	r7, sp, #0
 8002108:	4603      	mov	r3, r0
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	607a      	str	r2, [r7, #4]
 800210e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002114:	f7ff ff42 	bl	8001f9c <__NVIC_GetPriorityGrouping>
 8002118:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	68b9      	ldr	r1, [r7, #8]
 800211e:	6978      	ldr	r0, [r7, #20]
 8002120:	f7ff ff90 	bl	8002044 <NVIC_EncodePriority>
 8002124:	4602      	mov	r2, r0
 8002126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800212a:	4611      	mov	r1, r2
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff ff5f 	bl	8001ff0 <__NVIC_SetPriority>
}
 8002132:	bf00      	nop
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	4603      	mov	r3, r0
 8002142:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff ff35 	bl	8001fb8 <__NVIC_EnableIRQ>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7ff ffa2 	bl	80020a8 <SysTick_Config>
 8002164:	4603      	mov	r3, r0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002170:	b480      	push	{r7}
 8002172:	b08b      	sub	sp, #44	; 0x2c
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800217a:	2300      	movs	r3, #0
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800217e:	2300      	movs	r3, #0
 8002180:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002182:	e169      	b.n	8002458 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002184:	2201      	movs	r2, #1
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	69fa      	ldr	r2, [r7, #28]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	429a      	cmp	r2, r3
 800219e:	f040 8158 	bne.w	8002452 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	4a9a      	ldr	r2, [pc, #616]	; (8002410 <HAL_GPIO_Init+0x2a0>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d05e      	beq.n	800226a <HAL_GPIO_Init+0xfa>
 80021ac:	4a98      	ldr	r2, [pc, #608]	; (8002410 <HAL_GPIO_Init+0x2a0>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d875      	bhi.n	800229e <HAL_GPIO_Init+0x12e>
 80021b2:	4a98      	ldr	r2, [pc, #608]	; (8002414 <HAL_GPIO_Init+0x2a4>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d058      	beq.n	800226a <HAL_GPIO_Init+0xfa>
 80021b8:	4a96      	ldr	r2, [pc, #600]	; (8002414 <HAL_GPIO_Init+0x2a4>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d86f      	bhi.n	800229e <HAL_GPIO_Init+0x12e>
 80021be:	4a96      	ldr	r2, [pc, #600]	; (8002418 <HAL_GPIO_Init+0x2a8>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d052      	beq.n	800226a <HAL_GPIO_Init+0xfa>
 80021c4:	4a94      	ldr	r2, [pc, #592]	; (8002418 <HAL_GPIO_Init+0x2a8>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d869      	bhi.n	800229e <HAL_GPIO_Init+0x12e>
 80021ca:	4a94      	ldr	r2, [pc, #592]	; (800241c <HAL_GPIO_Init+0x2ac>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d04c      	beq.n	800226a <HAL_GPIO_Init+0xfa>
 80021d0:	4a92      	ldr	r2, [pc, #584]	; (800241c <HAL_GPIO_Init+0x2ac>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d863      	bhi.n	800229e <HAL_GPIO_Init+0x12e>
 80021d6:	4a92      	ldr	r2, [pc, #584]	; (8002420 <HAL_GPIO_Init+0x2b0>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d046      	beq.n	800226a <HAL_GPIO_Init+0xfa>
 80021dc:	4a90      	ldr	r2, [pc, #576]	; (8002420 <HAL_GPIO_Init+0x2b0>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d85d      	bhi.n	800229e <HAL_GPIO_Init+0x12e>
 80021e2:	2b12      	cmp	r3, #18
 80021e4:	d82a      	bhi.n	800223c <HAL_GPIO_Init+0xcc>
 80021e6:	2b12      	cmp	r3, #18
 80021e8:	d859      	bhi.n	800229e <HAL_GPIO_Init+0x12e>
 80021ea:	a201      	add	r2, pc, #4	; (adr r2, 80021f0 <HAL_GPIO_Init+0x80>)
 80021ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f0:	0800226b 	.word	0x0800226b
 80021f4:	08002245 	.word	0x08002245
 80021f8:	08002257 	.word	0x08002257
 80021fc:	08002299 	.word	0x08002299
 8002200:	0800229f 	.word	0x0800229f
 8002204:	0800229f 	.word	0x0800229f
 8002208:	0800229f 	.word	0x0800229f
 800220c:	0800229f 	.word	0x0800229f
 8002210:	0800229f 	.word	0x0800229f
 8002214:	0800229f 	.word	0x0800229f
 8002218:	0800229f 	.word	0x0800229f
 800221c:	0800229f 	.word	0x0800229f
 8002220:	0800229f 	.word	0x0800229f
 8002224:	0800229f 	.word	0x0800229f
 8002228:	0800229f 	.word	0x0800229f
 800222c:	0800229f 	.word	0x0800229f
 8002230:	0800229f 	.word	0x0800229f
 8002234:	0800224d 	.word	0x0800224d
 8002238:	08002261 	.word	0x08002261
 800223c:	4a79      	ldr	r2, [pc, #484]	; (8002424 <HAL_GPIO_Init+0x2b4>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d013      	beq.n	800226a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002242:	e02c      	b.n	800229e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	623b      	str	r3, [r7, #32]
          break;
 800224a:	e029      	b.n	80022a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	3304      	adds	r3, #4
 8002252:	623b      	str	r3, [r7, #32]
          break;
 8002254:	e024      	b.n	80022a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	3308      	adds	r3, #8
 800225c:	623b      	str	r3, [r7, #32]
          break;
 800225e:	e01f      	b.n	80022a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	330c      	adds	r3, #12
 8002266:	623b      	str	r3, [r7, #32]
          break;
 8002268:	e01a      	b.n	80022a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d102      	bne.n	8002278 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002272:	2304      	movs	r3, #4
 8002274:	623b      	str	r3, [r7, #32]
          break;
 8002276:	e013      	b.n	80022a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d105      	bne.n	800228c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002280:	2308      	movs	r3, #8
 8002282:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69fa      	ldr	r2, [r7, #28]
 8002288:	611a      	str	r2, [r3, #16]
          break;
 800228a:	e009      	b.n	80022a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800228c:	2308      	movs	r3, #8
 800228e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	69fa      	ldr	r2, [r7, #28]
 8002294:	615a      	str	r2, [r3, #20]
          break;
 8002296:	e003      	b.n	80022a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002298:	2300      	movs	r3, #0
 800229a:	623b      	str	r3, [r7, #32]
          break;
 800229c:	e000      	b.n	80022a0 <HAL_GPIO_Init+0x130>
          break;
 800229e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	2bff      	cmp	r3, #255	; 0xff
 80022a4:	d801      	bhi.n	80022aa <HAL_GPIO_Init+0x13a>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	e001      	b.n	80022ae <HAL_GPIO_Init+0x13e>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3304      	adds	r3, #4
 80022ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	2bff      	cmp	r3, #255	; 0xff
 80022b4:	d802      	bhi.n	80022bc <HAL_GPIO_Init+0x14c>
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	e002      	b.n	80022c2 <HAL_GPIO_Init+0x152>
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	3b08      	subs	r3, #8
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	210f      	movs	r1, #15
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	fa01 f303 	lsl.w	r3, r1, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	401a      	ands	r2, r3
 80022d4:	6a39      	ldr	r1, [r7, #32]
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	fa01 f303 	lsl.w	r3, r1, r3
 80022dc:	431a      	orrs	r2, r3
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 80b1 	beq.w	8002452 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022f0:	4b4d      	ldr	r3, [pc, #308]	; (8002428 <HAL_GPIO_Init+0x2b8>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	4a4c      	ldr	r2, [pc, #304]	; (8002428 <HAL_GPIO_Init+0x2b8>)
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	6193      	str	r3, [r2, #24]
 80022fc:	4b4a      	ldr	r3, [pc, #296]	; (8002428 <HAL_GPIO_Init+0x2b8>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002308:	4a48      	ldr	r2, [pc, #288]	; (800242c <HAL_GPIO_Init+0x2bc>)
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	089b      	lsrs	r3, r3, #2
 800230e:	3302      	adds	r3, #2
 8002310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002314:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	220f      	movs	r2, #15
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	4013      	ands	r3, r2
 800232a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a40      	ldr	r2, [pc, #256]	; (8002430 <HAL_GPIO_Init+0x2c0>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d013      	beq.n	800235c <HAL_GPIO_Init+0x1ec>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a3f      	ldr	r2, [pc, #252]	; (8002434 <HAL_GPIO_Init+0x2c4>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d00d      	beq.n	8002358 <HAL_GPIO_Init+0x1e8>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a3e      	ldr	r2, [pc, #248]	; (8002438 <HAL_GPIO_Init+0x2c8>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d007      	beq.n	8002354 <HAL_GPIO_Init+0x1e4>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a3d      	ldr	r2, [pc, #244]	; (800243c <HAL_GPIO_Init+0x2cc>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d101      	bne.n	8002350 <HAL_GPIO_Init+0x1e0>
 800234c:	2303      	movs	r3, #3
 800234e:	e006      	b.n	800235e <HAL_GPIO_Init+0x1ee>
 8002350:	2304      	movs	r3, #4
 8002352:	e004      	b.n	800235e <HAL_GPIO_Init+0x1ee>
 8002354:	2302      	movs	r3, #2
 8002356:	e002      	b.n	800235e <HAL_GPIO_Init+0x1ee>
 8002358:	2301      	movs	r3, #1
 800235a:	e000      	b.n	800235e <HAL_GPIO_Init+0x1ee>
 800235c:	2300      	movs	r3, #0
 800235e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002360:	f002 0203 	and.w	r2, r2, #3
 8002364:	0092      	lsls	r2, r2, #2
 8002366:	4093      	lsls	r3, r2
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4313      	orrs	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800236e:	492f      	ldr	r1, [pc, #188]	; (800242c <HAL_GPIO_Init+0x2bc>)
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	089b      	lsrs	r3, r3, #2
 8002374:	3302      	adds	r3, #2
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d006      	beq.n	8002396 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002388:	4b2d      	ldr	r3, [pc, #180]	; (8002440 <HAL_GPIO_Init+0x2d0>)
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	492c      	ldr	r1, [pc, #176]	; (8002440 <HAL_GPIO_Init+0x2d0>)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	4313      	orrs	r3, r2
 8002392:	608b      	str	r3, [r1, #8]
 8002394:	e006      	b.n	80023a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002396:	4b2a      	ldr	r3, [pc, #168]	; (8002440 <HAL_GPIO_Init+0x2d0>)
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	43db      	mvns	r3, r3
 800239e:	4928      	ldr	r1, [pc, #160]	; (8002440 <HAL_GPIO_Init+0x2d0>)
 80023a0:	4013      	ands	r3, r2
 80023a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d006      	beq.n	80023be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023b0:	4b23      	ldr	r3, [pc, #140]	; (8002440 <HAL_GPIO_Init+0x2d0>)
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	4922      	ldr	r1, [pc, #136]	; (8002440 <HAL_GPIO_Init+0x2d0>)
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	60cb      	str	r3, [r1, #12]
 80023bc:	e006      	b.n	80023cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023be:	4b20      	ldr	r3, [pc, #128]	; (8002440 <HAL_GPIO_Init+0x2d0>)
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	43db      	mvns	r3, r3
 80023c6:	491e      	ldr	r1, [pc, #120]	; (8002440 <HAL_GPIO_Init+0x2d0>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d006      	beq.n	80023e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023d8:	4b19      	ldr	r3, [pc, #100]	; (8002440 <HAL_GPIO_Init+0x2d0>)
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	4918      	ldr	r1, [pc, #96]	; (8002440 <HAL_GPIO_Init+0x2d0>)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	604b      	str	r3, [r1, #4]
 80023e4:	e006      	b.n	80023f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023e6:	4b16      	ldr	r3, [pc, #88]	; (8002440 <HAL_GPIO_Init+0x2d0>)
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	4914      	ldr	r1, [pc, #80]	; (8002440 <HAL_GPIO_Init+0x2d0>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d021      	beq.n	8002444 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002400:	4b0f      	ldr	r3, [pc, #60]	; (8002440 <HAL_GPIO_Init+0x2d0>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	490e      	ldr	r1, [pc, #56]	; (8002440 <HAL_GPIO_Init+0x2d0>)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	4313      	orrs	r3, r2
 800240a:	600b      	str	r3, [r1, #0]
 800240c:	e021      	b.n	8002452 <HAL_GPIO_Init+0x2e2>
 800240e:	bf00      	nop
 8002410:	10320000 	.word	0x10320000
 8002414:	10310000 	.word	0x10310000
 8002418:	10220000 	.word	0x10220000
 800241c:	10210000 	.word	0x10210000
 8002420:	10120000 	.word	0x10120000
 8002424:	10110000 	.word	0x10110000
 8002428:	40021000 	.word	0x40021000
 800242c:	40010000 	.word	0x40010000
 8002430:	40010800 	.word	0x40010800
 8002434:	40010c00 	.word	0x40010c00
 8002438:	40011000 	.word	0x40011000
 800243c:	40011400 	.word	0x40011400
 8002440:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <HAL_GPIO_Init+0x304>)
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	43db      	mvns	r3, r3
 800244c:	4909      	ldr	r1, [pc, #36]	; (8002474 <HAL_GPIO_Init+0x304>)
 800244e:	4013      	ands	r3, r2
 8002450:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	3301      	adds	r3, #1
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	fa22 f303 	lsr.w	r3, r2, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	f47f ae8e 	bne.w	8002184 <HAL_GPIO_Init+0x14>
  }
}
 8002468:	bf00      	nop
 800246a:	bf00      	nop
 800246c:	372c      	adds	r7, #44	; 0x2c
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr
 8002474:	40010400 	.word	0x40010400

08002478 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	460b      	mov	r3, r1
 8002482:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	887b      	ldrh	r3, [r7, #2]
 800248a:	4013      	ands	r3, r2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002490:	2301      	movs	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
 8002494:	e001      	b.n	800249a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002496:	2300      	movs	r3, #0
 8002498:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800249a:	7bfb      	ldrb	r3, [r7, #15]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr

080024a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	460b      	mov	r3, r1
 80024b0:	807b      	strh	r3, [r7, #2]
 80024b2:	4613      	mov	r3, r2
 80024b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024b6:	787b      	ldrb	r3, [r7, #1]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024bc:	887a      	ldrh	r2, [r7, #2]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024c2:	e003      	b.n	80024cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024c4:	887b      	ldrh	r3, [r7, #2]
 80024c6:	041a      	lsls	r2, r3, #16
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	611a      	str	r2, [r3, #16]
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr
	...

080024d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024e2:	4b08      	ldr	r3, [pc, #32]	; (8002504 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024e4:	695a      	ldr	r2, [r3, #20]
 80024e6:	88fb      	ldrh	r3, [r7, #6]
 80024e8:	4013      	ands	r3, r2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d006      	beq.n	80024fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024ee:	4a05      	ldr	r2, [pc, #20]	; (8002504 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024f0:	88fb      	ldrh	r3, [r7, #6]
 80024f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024f4:	88fb      	ldrh	r3, [r7, #6]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fd fe30 	bl	800015c <HAL_GPIO_EXTI_Callback>
  }
}
 80024fc:	bf00      	nop
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40010400 	.word	0x40010400

08002508 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e26c      	b.n	80029f4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 8087 	beq.w	8002636 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002528:	4b92      	ldr	r3, [pc, #584]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 030c 	and.w	r3, r3, #12
 8002530:	2b04      	cmp	r3, #4
 8002532:	d00c      	beq.n	800254e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002534:	4b8f      	ldr	r3, [pc, #572]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 030c 	and.w	r3, r3, #12
 800253c:	2b08      	cmp	r3, #8
 800253e:	d112      	bne.n	8002566 <HAL_RCC_OscConfig+0x5e>
 8002540:	4b8c      	ldr	r3, [pc, #560]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800254c:	d10b      	bne.n	8002566 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800254e:	4b89      	ldr	r3, [pc, #548]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d06c      	beq.n	8002634 <HAL_RCC_OscConfig+0x12c>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d168      	bne.n	8002634 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e246      	b.n	80029f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800256e:	d106      	bne.n	800257e <HAL_RCC_OscConfig+0x76>
 8002570:	4b80      	ldr	r3, [pc, #512]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a7f      	ldr	r2, [pc, #508]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800257a:	6013      	str	r3, [r2, #0]
 800257c:	e02e      	b.n	80025dc <HAL_RCC_OscConfig+0xd4>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10c      	bne.n	80025a0 <HAL_RCC_OscConfig+0x98>
 8002586:	4b7b      	ldr	r3, [pc, #492]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a7a      	ldr	r2, [pc, #488]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 800258c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	4b78      	ldr	r3, [pc, #480]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a77      	ldr	r2, [pc, #476]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002598:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	e01d      	b.n	80025dc <HAL_RCC_OscConfig+0xd4>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025a8:	d10c      	bne.n	80025c4 <HAL_RCC_OscConfig+0xbc>
 80025aa:	4b72      	ldr	r3, [pc, #456]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a71      	ldr	r2, [pc, #452]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 80025b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	4b6f      	ldr	r3, [pc, #444]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a6e      	ldr	r2, [pc, #440]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	e00b      	b.n	80025dc <HAL_RCC_OscConfig+0xd4>
 80025c4:	4b6b      	ldr	r3, [pc, #428]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a6a      	ldr	r2, [pc, #424]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 80025ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	4b68      	ldr	r3, [pc, #416]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a67      	ldr	r2, [pc, #412]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 80025d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d013      	beq.n	800260c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e4:	f7fe fb2e 	bl	8000c44 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025ec:	f7fe fb2a 	bl	8000c44 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b64      	cmp	r3, #100	; 0x64
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e1fa      	b.n	80029f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fe:	4b5d      	ldr	r3, [pc, #372]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0xe4>
 800260a:	e014      	b.n	8002636 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260c:	f7fe fb1a 	bl	8000c44 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002614:	f7fe fb16 	bl	8000c44 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b64      	cmp	r3, #100	; 0x64
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e1e6      	b.n	80029f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002626:	4b53      	ldr	r3, [pc, #332]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0x10c>
 8002632:	e000      	b.n	8002636 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d063      	beq.n	800270a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002642:	4b4c      	ldr	r3, [pc, #304]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f003 030c 	and.w	r3, r3, #12
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00b      	beq.n	8002666 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800264e:	4b49      	ldr	r3, [pc, #292]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f003 030c 	and.w	r3, r3, #12
 8002656:	2b08      	cmp	r3, #8
 8002658:	d11c      	bne.n	8002694 <HAL_RCC_OscConfig+0x18c>
 800265a:	4b46      	ldr	r3, [pc, #280]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d116      	bne.n	8002694 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002666:	4b43      	ldr	r3, [pc, #268]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d005      	beq.n	800267e <HAL_RCC_OscConfig+0x176>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d001      	beq.n	800267e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e1ba      	b.n	80029f4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267e:	4b3d      	ldr	r3, [pc, #244]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	4939      	ldr	r1, [pc, #228]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 800268e:	4313      	orrs	r3, r2
 8002690:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002692:	e03a      	b.n	800270a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d020      	beq.n	80026de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800269c:	4b36      	ldr	r3, [pc, #216]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 800269e:	2201      	movs	r2, #1
 80026a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a2:	f7fe facf 	bl	8000c44 <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026aa:	f7fe facb 	bl	8000c44 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e19b      	b.n	80029f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026bc:	4b2d      	ldr	r3, [pc, #180]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0f0      	beq.n	80026aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c8:	4b2a      	ldr	r3, [pc, #168]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4927      	ldr	r1, [pc, #156]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	600b      	str	r3, [r1, #0]
 80026dc:	e015      	b.n	800270a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026de:	4b26      	ldr	r3, [pc, #152]	; (8002778 <HAL_RCC_OscConfig+0x270>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e4:	f7fe faae 	bl	8000c44 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ec:	f7fe faaa 	bl	8000c44 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e17a      	b.n	80029f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026fe:	4b1d      	ldr	r3, [pc, #116]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f0      	bne.n	80026ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d03a      	beq.n	800278c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d019      	beq.n	8002752 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800271e:	4b17      	ldr	r3, [pc, #92]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002720:	2201      	movs	r2, #1
 8002722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002724:	f7fe fa8e 	bl	8000c44 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800272c:	f7fe fa8a 	bl	8000c44 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e15a      	b.n	80029f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800273e:	4b0d      	ldr	r3, [pc, #52]	; (8002774 <HAL_RCC_OscConfig+0x26c>)
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f0      	beq.n	800272c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800274a:	2001      	movs	r0, #1
 800274c:	f000 fab8 	bl	8002cc0 <RCC_Delay>
 8002750:	e01c      	b.n	800278c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002752:	4b0a      	ldr	r3, [pc, #40]	; (800277c <HAL_RCC_OscConfig+0x274>)
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002758:	f7fe fa74 	bl	8000c44 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800275e:	e00f      	b.n	8002780 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002760:	f7fe fa70 	bl	8000c44 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d908      	bls.n	8002780 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e140      	b.n	80029f4 <HAL_RCC_OscConfig+0x4ec>
 8002772:	bf00      	nop
 8002774:	40021000 	.word	0x40021000
 8002778:	42420000 	.word	0x42420000
 800277c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002780:	4b9e      	ldr	r3, [pc, #632]	; (80029fc <HAL_RCC_OscConfig+0x4f4>)
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1e9      	bne.n	8002760 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 80a6 	beq.w	80028e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800279a:	2300      	movs	r3, #0
 800279c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800279e:	4b97      	ldr	r3, [pc, #604]	; (80029fc <HAL_RCC_OscConfig+0x4f4>)
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10d      	bne.n	80027c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027aa:	4b94      	ldr	r3, [pc, #592]	; (80029fc <HAL_RCC_OscConfig+0x4f4>)
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	4a93      	ldr	r2, [pc, #588]	; (80029fc <HAL_RCC_OscConfig+0x4f4>)
 80027b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b4:	61d3      	str	r3, [r2, #28]
 80027b6:	4b91      	ldr	r3, [pc, #580]	; (80029fc <HAL_RCC_OscConfig+0x4f4>)
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027c2:	2301      	movs	r3, #1
 80027c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c6:	4b8e      	ldr	r3, [pc, #568]	; (8002a00 <HAL_RCC_OscConfig+0x4f8>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d118      	bne.n	8002804 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027d2:	4b8b      	ldr	r3, [pc, #556]	; (8002a00 <HAL_RCC_OscConfig+0x4f8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a8a      	ldr	r2, [pc, #552]	; (8002a00 <HAL_RCC_OscConfig+0x4f8>)
 80027d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027de:	f7fe fa31 	bl	8000c44 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e6:	f7fe fa2d 	bl	8000c44 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b64      	cmp	r3, #100	; 0x64
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e0fd      	b.n	80029f4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f8:	4b81      	ldr	r3, [pc, #516]	; (8002a00 <HAL_RCC_OscConfig+0x4f8>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0f0      	beq.n	80027e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d106      	bne.n	800281a <HAL_RCC_OscConfig+0x312>
 800280c:	4b7b      	ldr	r3, [pc, #492]	; (80029fc <HAL_RCC_OscConfig+0x4f4>)
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	4a7a      	ldr	r2, [pc, #488]	; (80029fc <HAL_RCC_OscConfig+0x4f4>)
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	6213      	str	r3, [r2, #32]
 8002818:	e02d      	b.n	8002876 <HAL_RCC_OscConfig+0x36e>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10c      	bne.n	800283c <HAL_RCC_OscConfig+0x334>
 8002822:	4b76      	ldr	r3, [pc, #472]	; (80029fc <HAL_RCC_OscConfig+0x4f4>)
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	4a75      	ldr	r2, [pc, #468]	; (80029fc <HAL_RCC_OscConfig+0x4f4>)
 8002828:	f023 0301 	bic.w	r3, r3, #1
 800282c:	6213      	str	r3, [r2, #32]
 800282e:	4b73      	ldr	r3, [pc, #460]	; (80029fc <HAL_RCC_OscConfig+0x4f4>)
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	4a72      	ldr	r2, [pc, #456]	; (80029fc <HAL_RCC_OscConfig+0x4f4>)
 8002834:	f023 0304 	bic.w	r3, r3, #4
 8002838:	6213      	str	r3, [r2, #32]
 800283a:	e01c      	b.n	8002876 <HAL_RCC_OscConfig+0x36e>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	2b05      	cmp	r3, #5
 8002842:	d10c      	bne.n	800285e <HAL_RCC_OscConfig+0x356>
 8002844:	4b6d      	ldr	r3, [pc, #436]	; (80029fc <HAL_RCC_OscConfig+0x4f4>)
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	4a6c      	ldr	r2, [pc, #432]	; (80029fc <HAL_RCC_OscConfig+0x4f4>)
 800284a:	f043 0304 	orr.w	r3, r3, #4
 800284e:	6213      	str	r3, [r2, #32]
 8002850:	4b6a      	ldr	r3, [pc, #424]	; (80029fc <HAL_RCC_OscConfig+0x4f4>)
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	4a69      	ldr	r2, [pc, #420]	; (80029fc <HAL_RCC_OscConfig+0x4f4>)
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	6213      	str	r3, [r2, #32]
 800285c:	e00b      	b.n	8002876 <HAL_RCC_OscConfig+0x36e>
 800285e:	4b67      	ldr	r3, [pc, #412]	; (80029fc <HAL_RCC_OscConfig+0x4f4>)
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	4a66      	ldr	r2, [pc, #408]	; (80029fc <HAL_RCC_OscConfig+0x4f4>)
 8002864:	f023 0301 	bic.w	r3, r3, #1
 8002868:	6213      	str	r3, [r2, #32]
 800286a:	4b64      	ldr	r3, [pc, #400]	; (80029fc <HAL_RCC_OscConfig+0x4f4>)
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	4a63      	ldr	r2, [pc, #396]	; (80029fc <HAL_RCC_OscConfig+0x4f4>)
 8002870:	f023 0304 	bic.w	r3, r3, #4
 8002874:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d015      	beq.n	80028aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287e:	f7fe f9e1 	bl	8000c44 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002884:	e00a      	b.n	800289c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002886:	f7fe f9dd 	bl	8000c44 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	f241 3288 	movw	r2, #5000	; 0x1388
 8002894:	4293      	cmp	r3, r2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e0ab      	b.n	80029f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289c:	4b57      	ldr	r3, [pc, #348]	; (80029fc <HAL_RCC_OscConfig+0x4f4>)
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0ee      	beq.n	8002886 <HAL_RCC_OscConfig+0x37e>
 80028a8:	e014      	b.n	80028d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028aa:	f7fe f9cb 	bl	8000c44 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b0:	e00a      	b.n	80028c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b2:	f7fe f9c7 	bl	8000c44 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e095      	b.n	80029f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c8:	4b4c      	ldr	r3, [pc, #304]	; (80029fc <HAL_RCC_OscConfig+0x4f4>)
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1ee      	bne.n	80028b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028d4:	7dfb      	ldrb	r3, [r7, #23]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d105      	bne.n	80028e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028da:	4b48      	ldr	r3, [pc, #288]	; (80029fc <HAL_RCC_OscConfig+0x4f4>)
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	4a47      	ldr	r2, [pc, #284]	; (80029fc <HAL_RCC_OscConfig+0x4f4>)
 80028e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 8081 	beq.w	80029f2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028f0:	4b42      	ldr	r3, [pc, #264]	; (80029fc <HAL_RCC_OscConfig+0x4f4>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 030c 	and.w	r3, r3, #12
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d061      	beq.n	80029c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	2b02      	cmp	r3, #2
 8002902:	d146      	bne.n	8002992 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002904:	4b3f      	ldr	r3, [pc, #252]	; (8002a04 <HAL_RCC_OscConfig+0x4fc>)
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290a:	f7fe f99b 	bl	8000c44 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002912:	f7fe f997 	bl	8000c44 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e067      	b.n	80029f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002924:	4b35      	ldr	r3, [pc, #212]	; (80029fc <HAL_RCC_OscConfig+0x4f4>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1f0      	bne.n	8002912 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002938:	d108      	bne.n	800294c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800293a:	4b30      	ldr	r3, [pc, #192]	; (80029fc <HAL_RCC_OscConfig+0x4f4>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	492d      	ldr	r1, [pc, #180]	; (80029fc <HAL_RCC_OscConfig+0x4f4>)
 8002948:	4313      	orrs	r3, r2
 800294a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800294c:	4b2b      	ldr	r3, [pc, #172]	; (80029fc <HAL_RCC_OscConfig+0x4f4>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a19      	ldr	r1, [r3, #32]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	430b      	orrs	r3, r1
 800295e:	4927      	ldr	r1, [pc, #156]	; (80029fc <HAL_RCC_OscConfig+0x4f4>)
 8002960:	4313      	orrs	r3, r2
 8002962:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002964:	4b27      	ldr	r3, [pc, #156]	; (8002a04 <HAL_RCC_OscConfig+0x4fc>)
 8002966:	2201      	movs	r2, #1
 8002968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296a:	f7fe f96b 	bl	8000c44 <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002972:	f7fe f967 	bl	8000c44 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e037      	b.n	80029f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002984:	4b1d      	ldr	r3, [pc, #116]	; (80029fc <HAL_RCC_OscConfig+0x4f4>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0f0      	beq.n	8002972 <HAL_RCC_OscConfig+0x46a>
 8002990:	e02f      	b.n	80029f2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002992:	4b1c      	ldr	r3, [pc, #112]	; (8002a04 <HAL_RCC_OscConfig+0x4fc>)
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002998:	f7fe f954 	bl	8000c44 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a0:	f7fe f950 	bl	8000c44 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e020      	b.n	80029f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029b2:	4b12      	ldr	r3, [pc, #72]	; (80029fc <HAL_RCC_OscConfig+0x4f4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x498>
 80029be:	e018      	b.n	80029f2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d101      	bne.n	80029cc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e013      	b.n	80029f4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029cc:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <HAL_RCC_OscConfig+0x4f4>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d106      	bne.n	80029ee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d001      	beq.n	80029f2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e000      	b.n	80029f4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40021000 	.word	0x40021000
 8002a00:	40007000 	.word	0x40007000
 8002a04:	42420060 	.word	0x42420060

08002a08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0d0      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a1c:	4b6a      	ldr	r3, [pc, #424]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d910      	bls.n	8002a4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2a:	4b67      	ldr	r3, [pc, #412]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f023 0207 	bic.w	r2, r3, #7
 8002a32:	4965      	ldr	r1, [pc, #404]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3a:	4b63      	ldr	r3, [pc, #396]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d001      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0b8      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d020      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d005      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a64:	4b59      	ldr	r3, [pc, #356]	; (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	4a58      	ldr	r2, [pc, #352]	; (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002a6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0308 	and.w	r3, r3, #8
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a7c:	4b53      	ldr	r3, [pc, #332]	; (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	4a52      	ldr	r2, [pc, #328]	; (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002a82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a88:	4b50      	ldr	r3, [pc, #320]	; (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	494d      	ldr	r1, [pc, #308]	; (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d040      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d107      	bne.n	8002abe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aae:	4b47      	ldr	r3, [pc, #284]	; (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d115      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e07f      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d107      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ac6:	4b41      	ldr	r3, [pc, #260]	; (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d109      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e073      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad6:	4b3d      	ldr	r3, [pc, #244]	; (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e06b      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ae6:	4b39      	ldr	r3, [pc, #228]	; (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f023 0203 	bic.w	r2, r3, #3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	4936      	ldr	r1, [pc, #216]	; (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002af8:	f7fe f8a4 	bl	8000c44 <HAL_GetTick>
 8002afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002afe:	e00a      	b.n	8002b16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b00:	f7fe f8a0 	bl	8000c44 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e053      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b16:	4b2d      	ldr	r3, [pc, #180]	; (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 020c 	and.w	r2, r3, #12
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d1eb      	bne.n	8002b00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b28:	4b27      	ldr	r3, [pc, #156]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d210      	bcs.n	8002b58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b36:	4b24      	ldr	r3, [pc, #144]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f023 0207 	bic.w	r2, r3, #7
 8002b3e:	4922      	ldr	r1, [pc, #136]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b46:	4b20      	ldr	r3, [pc, #128]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d001      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e032      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d008      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b64:	4b19      	ldr	r3, [pc, #100]	; (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	4916      	ldr	r1, [pc, #88]	; (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d009      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b82:	4b12      	ldr	r3, [pc, #72]	; (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	490e      	ldr	r1, [pc, #56]	; (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b96:	f000 f821 	bl	8002bdc <HAL_RCC_GetSysClockFreq>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	091b      	lsrs	r3, r3, #4
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	490a      	ldr	r1, [pc, #40]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ba8:	5ccb      	ldrb	r3, [r1, r3]
 8002baa:	fa22 f303 	lsr.w	r3, r2, r3
 8002bae:	4a09      	ldr	r2, [pc, #36]	; (8002bd4 <HAL_RCC_ClockConfig+0x1cc>)
 8002bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bb2:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <HAL_RCC_ClockConfig+0x1d0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fe f802 	bl	8000bc0 <HAL_InitTick>

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40022000 	.word	0x40022000
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	0800389c 	.word	0x0800389c
 8002bd4:	20000008 	.word	0x20000008
 8002bd8:	2000000c 	.word	0x2000000c

08002bdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b087      	sub	sp, #28
 8002be0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	2300      	movs	r3, #0
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]
 8002bee:	2300      	movs	r3, #0
 8002bf0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bf6:	4b1e      	ldr	r3, [pc, #120]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d002      	beq.n	8002c0c <HAL_RCC_GetSysClockFreq+0x30>
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d003      	beq.n	8002c12 <HAL_RCC_GetSysClockFreq+0x36>
 8002c0a:	e027      	b.n	8002c5c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c0c:	4b19      	ldr	r3, [pc, #100]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c0e:	613b      	str	r3, [r7, #16]
      break;
 8002c10:	e027      	b.n	8002c62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	0c9b      	lsrs	r3, r3, #18
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	4a17      	ldr	r2, [pc, #92]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c1c:	5cd3      	ldrb	r3, [r2, r3]
 8002c1e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d010      	beq.n	8002c4c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c2a:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	0c5b      	lsrs	r3, r3, #17
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	4a11      	ldr	r2, [pc, #68]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c36:	5cd3      	ldrb	r3, [r2, r3]
 8002c38:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a0d      	ldr	r2, [pc, #52]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c3e:	fb02 f203 	mul.w	r2, r2, r3
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c48:	617b      	str	r3, [r7, #20]
 8002c4a:	e004      	b.n	8002c56 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a0c      	ldr	r2, [pc, #48]	; (8002c80 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c50:	fb02 f303 	mul.w	r3, r2, r3
 8002c54:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	613b      	str	r3, [r7, #16]
      break;
 8002c5a:	e002      	b.n	8002c62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c5e:	613b      	str	r3, [r7, #16]
      break;
 8002c60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c62:	693b      	ldr	r3, [r7, #16]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	371c      	adds	r7, #28
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40021000 	.word	0x40021000
 8002c74:	007a1200 	.word	0x007a1200
 8002c78:	080038b4 	.word	0x080038b4
 8002c7c:	080038c4 	.word	0x080038c4
 8002c80:	003d0900 	.word	0x003d0900

08002c84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c88:	4b02      	ldr	r3, [pc, #8]	; (8002c94 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr
 8002c94:	20000008 	.word	0x20000008

08002c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c9c:	f7ff fff2 	bl	8002c84 <HAL_RCC_GetHCLKFreq>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	0adb      	lsrs	r3, r3, #11
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	4903      	ldr	r1, [pc, #12]	; (8002cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cae:	5ccb      	ldrb	r3, [r1, r3]
 8002cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	080038ac 	.word	0x080038ac

08002cc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cc8:	4b0a      	ldr	r3, [pc, #40]	; (8002cf4 <RCC_Delay+0x34>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a0a      	ldr	r2, [pc, #40]	; (8002cf8 <RCC_Delay+0x38>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	0a5b      	lsrs	r3, r3, #9
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	fb02 f303 	mul.w	r3, r2, r3
 8002cda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002cdc:	bf00      	nop
  }
  while (Delay --);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	1e5a      	subs	r2, r3, #1
 8002ce2:	60fa      	str	r2, [r7, #12]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1f9      	bne.n	8002cdc <RCC_Delay+0x1c>
}
 8002ce8:	bf00      	nop
 8002cea:	bf00      	nop
 8002cec:	3714      	adds	r7, #20
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr
 8002cf4:	20000008 	.word	0x20000008
 8002cf8:	10624dd3 	.word	0x10624dd3

08002cfc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	613b      	str	r3, [r7, #16]
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d07d      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d1c:	4b4f      	ldr	r3, [pc, #316]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10d      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d28:	4b4c      	ldr	r3, [pc, #304]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	4a4b      	ldr	r2, [pc, #300]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d32:	61d3      	str	r3, [r2, #28]
 8002d34:	4b49      	ldr	r3, [pc, #292]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3c:	60bb      	str	r3, [r7, #8]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d40:	2301      	movs	r3, #1
 8002d42:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d44:	4b46      	ldr	r3, [pc, #280]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d118      	bne.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d50:	4b43      	ldr	r3, [pc, #268]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a42      	ldr	r2, [pc, #264]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d5c:	f7fd ff72 	bl	8000c44 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d62:	e008      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d64:	f7fd ff6e 	bl	8000c44 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b64      	cmp	r3, #100	; 0x64
 8002d70:	d901      	bls.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e06d      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d76:	4b3a      	ldr	r3, [pc, #232]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d82:	4b36      	ldr	r3, [pc, #216]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d8a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d02e      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d027      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002da0:	4b2e      	ldr	r3, [pc, #184]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002da8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002daa:	4b2e      	ldr	r3, [pc, #184]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002db0:	4b2c      	ldr	r3, [pc, #176]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002db6:	4a29      	ldr	r2, [pc, #164]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d014      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc6:	f7fd ff3d 	bl	8000c44 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dcc:	e00a      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dce:	f7fd ff39 	bl	8000c44 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e036      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de4:	4b1d      	ldr	r3, [pc, #116]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0ee      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002df0:	4b1a      	ldr	r3, [pc, #104]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	4917      	ldr	r1, [pc, #92]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e02:	7dfb      	ldrb	r3, [r7, #23]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d105      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e08:	4b14      	ldr	r3, [pc, #80]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	4a13      	ldr	r2, [pc, #76]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e12:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d008      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e20:	4b0e      	ldr	r3, [pc, #56]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	490b      	ldr	r1, [pc, #44]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0310 	and.w	r3, r3, #16
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d008      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e3e:	4b07      	ldr	r3, [pc, #28]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	4904      	ldr	r1, [pc, #16]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	40007000 	.word	0x40007000
 8002e64:	42420440 	.word	0x42420440

08002e68 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b088      	sub	sp, #32
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]
 8002e74:	2300      	movs	r3, #0
 8002e76:	61fb      	str	r3, [r7, #28]
 8002e78:	2300      	movs	r3, #0
 8002e7a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	2300      	movs	r3, #0
 8002e82:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b10      	cmp	r3, #16
 8002e88:	d00a      	beq.n	8002ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b10      	cmp	r3, #16
 8002e8e:	f200 808a 	bhi.w	8002fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d045      	beq.n	8002f24 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d075      	beq.n	8002f8a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002e9e:	e082      	b.n	8002fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002ea0:	4b46      	ldr	r3, [pc, #280]	; (8002fbc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002ea6:	4b45      	ldr	r3, [pc, #276]	; (8002fbc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d07b      	beq.n	8002faa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	0c9b      	lsrs	r3, r3, #18
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	4a41      	ldr	r2, [pc, #260]	; (8002fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002ebc:	5cd3      	ldrb	r3, [r2, r3]
 8002ebe:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d015      	beq.n	8002ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002eca:	4b3c      	ldr	r3, [pc, #240]	; (8002fbc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	0c5b      	lsrs	r3, r3, #17
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	4a3b      	ldr	r2, [pc, #236]	; (8002fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002ed6:	5cd3      	ldrb	r3, [r2, r3]
 8002ed8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00d      	beq.n	8002f00 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002ee4:	4a38      	ldr	r2, [pc, #224]	; (8002fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	fb02 f303 	mul.w	r3, r2, r3
 8002ef2:	61fb      	str	r3, [r7, #28]
 8002ef4:	e004      	b.n	8002f00 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	4a34      	ldr	r2, [pc, #208]	; (8002fcc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002efa:	fb02 f303 	mul.w	r3, r2, r3
 8002efe:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002f00:	4b2e      	ldr	r3, [pc, #184]	; (8002fbc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f0c:	d102      	bne.n	8002f14 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	61bb      	str	r3, [r7, #24]
      break;
 8002f12:	e04a      	b.n	8002faa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	4a2d      	ldr	r2, [pc, #180]	; (8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1e:	085b      	lsrs	r3, r3, #1
 8002f20:	61bb      	str	r3, [r7, #24]
      break;
 8002f22:	e042      	b.n	8002faa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002f24:	4b25      	ldr	r3, [pc, #148]	; (8002fbc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f34:	d108      	bne.n	8002f48 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002f40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f44:	61bb      	str	r3, [r7, #24]
 8002f46:	e01f      	b.n	8002f88 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f52:	d109      	bne.n	8002f68 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002f54:	4b19      	ldr	r3, [pc, #100]	; (8002fbc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002f60:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002f64:	61bb      	str	r3, [r7, #24]
 8002f66:	e00f      	b.n	8002f88 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f72:	d11c      	bne.n	8002fae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002f74:	4b11      	ldr	r3, [pc, #68]	; (8002fbc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d016      	beq.n	8002fae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002f80:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002f84:	61bb      	str	r3, [r7, #24]
      break;
 8002f86:	e012      	b.n	8002fae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002f88:	e011      	b.n	8002fae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002f8a:	f7ff fe85 	bl	8002c98 <HAL_RCC_GetPCLK2Freq>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	0b9b      	lsrs	r3, r3, #14
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa2:	61bb      	str	r3, [r7, #24]
      break;
 8002fa4:	e004      	b.n	8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002fa6:	bf00      	nop
 8002fa8:	e002      	b.n	8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002faa:	bf00      	nop
 8002fac:	e000      	b.n	8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002fae:	bf00      	nop
    }
  }
  return (frequency);
 8002fb0:	69bb      	ldr	r3, [r7, #24]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3720      	adds	r7, #32
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	080038c8 	.word	0x080038c8
 8002fc4:	080038d8 	.word	0x080038d8
 8002fc8:	007a1200 	.word	0x007a1200
 8002fcc:	003d0900 	.word	0x003d0900
 8002fd0:	aaaaaaab 	.word	0xaaaaaaab

08002fd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e041      	b.n	800306a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d106      	bne.n	8003000 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7fd fce2 	bl	80009c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2202      	movs	r2, #2
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3304      	adds	r3, #4
 8003010:	4619      	mov	r1, r3
 8003012:	4610      	mov	r0, r2
 8003014:	f000 f992 	bl	800333c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d109      	bne.n	8003098 <HAL_TIM_PWM_Start+0x24>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b01      	cmp	r3, #1
 800308e:	bf14      	ite	ne
 8003090:	2301      	movne	r3, #1
 8003092:	2300      	moveq	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	e022      	b.n	80030de <HAL_TIM_PWM_Start+0x6a>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	2b04      	cmp	r3, #4
 800309c:	d109      	bne.n	80030b2 <HAL_TIM_PWM_Start+0x3e>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	bf14      	ite	ne
 80030aa:	2301      	movne	r3, #1
 80030ac:	2300      	moveq	r3, #0
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	e015      	b.n	80030de <HAL_TIM_PWM_Start+0x6a>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b08      	cmp	r3, #8
 80030b6:	d109      	bne.n	80030cc <HAL_TIM_PWM_Start+0x58>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	bf14      	ite	ne
 80030c4:	2301      	movne	r3, #1
 80030c6:	2300      	moveq	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	e008      	b.n	80030de <HAL_TIM_PWM_Start+0x6a>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	bf14      	ite	ne
 80030d8:	2301      	movne	r3, #1
 80030da:	2300      	moveq	r3, #0
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e05e      	b.n	80031a4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d104      	bne.n	80030f6 <HAL_TIM_PWM_Start+0x82>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030f4:	e013      	b.n	800311e <HAL_TIM_PWM_Start+0xaa>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d104      	bne.n	8003106 <HAL_TIM_PWM_Start+0x92>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2202      	movs	r2, #2
 8003100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003104:	e00b      	b.n	800311e <HAL_TIM_PWM_Start+0xaa>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	2b08      	cmp	r3, #8
 800310a:	d104      	bne.n	8003116 <HAL_TIM_PWM_Start+0xa2>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2202      	movs	r2, #2
 8003110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003114:	e003      	b.n	800311e <HAL_TIM_PWM_Start+0xaa>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2202      	movs	r2, #2
 800311a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2201      	movs	r2, #1
 8003124:	6839      	ldr	r1, [r7, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fafe 	bl	8003728 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a1e      	ldr	r2, [pc, #120]	; (80031ac <HAL_TIM_PWM_Start+0x138>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d107      	bne.n	8003146 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003144:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a18      	ldr	r2, [pc, #96]	; (80031ac <HAL_TIM_PWM_Start+0x138>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d00e      	beq.n	800316e <HAL_TIM_PWM_Start+0xfa>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003158:	d009      	beq.n	800316e <HAL_TIM_PWM_Start+0xfa>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a14      	ldr	r2, [pc, #80]	; (80031b0 <HAL_TIM_PWM_Start+0x13c>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d004      	beq.n	800316e <HAL_TIM_PWM_Start+0xfa>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a12      	ldr	r2, [pc, #72]	; (80031b4 <HAL_TIM_PWM_Start+0x140>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d111      	bne.n	8003192 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2b06      	cmp	r3, #6
 800317e:	d010      	beq.n	80031a2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003190:	e007      	b.n	80031a2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f042 0201 	orr.w	r2, r2, #1
 80031a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40012c00 	.word	0x40012c00
 80031b0:	40000400 	.word	0x40000400
 80031b4:	40000800 	.word	0x40000800

080031b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e0ae      	b.n	8003334 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b0c      	cmp	r3, #12
 80031e2:	f200 809f 	bhi.w	8003324 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80031e6:	a201      	add	r2, pc, #4	; (adr r2, 80031ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ec:	08003221 	.word	0x08003221
 80031f0:	08003325 	.word	0x08003325
 80031f4:	08003325 	.word	0x08003325
 80031f8:	08003325 	.word	0x08003325
 80031fc:	08003261 	.word	0x08003261
 8003200:	08003325 	.word	0x08003325
 8003204:	08003325 	.word	0x08003325
 8003208:	08003325 	.word	0x08003325
 800320c:	080032a3 	.word	0x080032a3
 8003210:	08003325 	.word	0x08003325
 8003214:	08003325 	.word	0x08003325
 8003218:	08003325 	.word	0x08003325
 800321c:	080032e3 	.word	0x080032e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68b9      	ldr	r1, [r7, #8]
 8003226:	4618      	mov	r0, r3
 8003228:	f000 f8f6 	bl	8003418 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699a      	ldr	r2, [r3, #24]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0208 	orr.w	r2, r2, #8
 800323a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699a      	ldr	r2, [r3, #24]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0204 	bic.w	r2, r2, #4
 800324a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6999      	ldr	r1, [r3, #24]
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	691a      	ldr	r2, [r3, #16]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	619a      	str	r2, [r3, #24]
      break;
 800325e:	e064      	b.n	800332a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68b9      	ldr	r1, [r7, #8]
 8003266:	4618      	mov	r0, r3
 8003268:	f000 f93c 	bl	80034e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699a      	ldr	r2, [r3, #24]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800327a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699a      	ldr	r2, [r3, #24]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800328a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6999      	ldr	r1, [r3, #24]
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	021a      	lsls	r2, r3, #8
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	619a      	str	r2, [r3, #24]
      break;
 80032a0:	e043      	b.n	800332a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68b9      	ldr	r1, [r7, #8]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 f985 	bl	80035b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	69da      	ldr	r2, [r3, #28]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f042 0208 	orr.w	r2, r2, #8
 80032bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	69da      	ldr	r2, [r3, #28]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0204 	bic.w	r2, r2, #4
 80032cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69d9      	ldr	r1, [r3, #28]
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	61da      	str	r2, [r3, #28]
      break;
 80032e0:	e023      	b.n	800332a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68b9      	ldr	r1, [r7, #8]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 f9cf 	bl	800368c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	69da      	ldr	r2, [r3, #28]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	69da      	ldr	r2, [r3, #28]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800330c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69d9      	ldr	r1, [r3, #28]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	021a      	lsls	r2, r3, #8
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	61da      	str	r2, [r3, #28]
      break;
 8003322:	e002      	b.n	800332a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	75fb      	strb	r3, [r7, #23]
      break;
 8003328:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003332:	7dfb      	ldrb	r3, [r7, #23]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3718      	adds	r7, #24
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a2f      	ldr	r2, [pc, #188]	; (800340c <TIM_Base_SetConfig+0xd0>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d00b      	beq.n	800336c <TIM_Base_SetConfig+0x30>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800335a:	d007      	beq.n	800336c <TIM_Base_SetConfig+0x30>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a2c      	ldr	r2, [pc, #176]	; (8003410 <TIM_Base_SetConfig+0xd4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d003      	beq.n	800336c <TIM_Base_SetConfig+0x30>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a2b      	ldr	r2, [pc, #172]	; (8003414 <TIM_Base_SetConfig+0xd8>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d108      	bne.n	800337e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003372:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	4313      	orrs	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a22      	ldr	r2, [pc, #136]	; (800340c <TIM_Base_SetConfig+0xd0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d00b      	beq.n	800339e <TIM_Base_SetConfig+0x62>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800338c:	d007      	beq.n	800339e <TIM_Base_SetConfig+0x62>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a1f      	ldr	r2, [pc, #124]	; (8003410 <TIM_Base_SetConfig+0xd4>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d003      	beq.n	800339e <TIM_Base_SetConfig+0x62>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a1e      	ldr	r2, [pc, #120]	; (8003414 <TIM_Base_SetConfig+0xd8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d108      	bne.n	80033b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a0d      	ldr	r2, [pc, #52]	; (800340c <TIM_Base_SetConfig+0xd0>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d103      	bne.n	80033e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	691a      	ldr	r2, [r3, #16]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d005      	beq.n	8003402 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	f023 0201 	bic.w	r2, r3, #1
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	611a      	str	r2, [r3, #16]
  }
}
 8003402:	bf00      	nop
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr
 800340c:	40012c00 	.word	0x40012c00
 8003410:	40000400 	.word	0x40000400
 8003414:	40000800 	.word	0x40000800

08003418 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	f023 0201 	bic.w	r2, r3, #1
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f023 0303 	bic.w	r3, r3, #3
 800344e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	4313      	orrs	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f023 0302 	bic.w	r3, r3, #2
 8003460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	4313      	orrs	r3, r2
 800346a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a1c      	ldr	r2, [pc, #112]	; (80034e0 <TIM_OC1_SetConfig+0xc8>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d10c      	bne.n	800348e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f023 0308 	bic.w	r3, r3, #8
 800347a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	4313      	orrs	r3, r2
 8003484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f023 0304 	bic.w	r3, r3, #4
 800348c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a13      	ldr	r2, [pc, #76]	; (80034e0 <TIM_OC1_SetConfig+0xc8>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d111      	bne.n	80034ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800349c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	621a      	str	r2, [r3, #32]
}
 80034d4:	bf00      	nop
 80034d6:	371c      	adds	r7, #28
 80034d8:	46bd      	mov	sp, r7
 80034da:	bc80      	pop	{r7}
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	40012c00 	.word	0x40012c00

080034e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	f023 0210 	bic.w	r2, r3, #16
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800351a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	021b      	lsls	r3, r3, #8
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	4313      	orrs	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f023 0320 	bic.w	r3, r3, #32
 800352e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	4313      	orrs	r3, r2
 800353a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a1d      	ldr	r2, [pc, #116]	; (80035b4 <TIM_OC2_SetConfig+0xd0>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d10d      	bne.n	8003560 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800354a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	4313      	orrs	r3, r2
 8003556:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800355e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a14      	ldr	r2, [pc, #80]	; (80035b4 <TIM_OC2_SetConfig+0xd0>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d113      	bne.n	8003590 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800356e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003576:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	4313      	orrs	r3, r2
 8003582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	621a      	str	r2, [r3, #32]
}
 80035aa:	bf00      	nop
 80035ac:	371c      	adds	r7, #28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr
 80035b4:	40012c00 	.word	0x40012c00

080035b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f023 0303 	bic.w	r3, r3, #3
 80035ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003600:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	021b      	lsls	r3, r3, #8
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	4313      	orrs	r3, r2
 800360c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a1d      	ldr	r2, [pc, #116]	; (8003688 <TIM_OC3_SetConfig+0xd0>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d10d      	bne.n	8003632 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800361c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	021b      	lsls	r3, r3, #8
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	4313      	orrs	r3, r2
 8003628:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003630:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a14      	ldr	r2, [pc, #80]	; (8003688 <TIM_OC3_SetConfig+0xd0>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d113      	bne.n	8003662 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003640:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003648:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	4313      	orrs	r3, r2
 8003654:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	4313      	orrs	r3, r2
 8003660:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	621a      	str	r2, [r3, #32]
}
 800367c:	bf00      	nop
 800367e:	371c      	adds	r7, #28
 8003680:	46bd      	mov	sp, r7
 8003682:	bc80      	pop	{r7}
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	40012c00 	.word	0x40012c00

0800368c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800368c:	b480      	push	{r7}
 800368e:	b087      	sub	sp, #28
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	021b      	lsls	r3, r3, #8
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	031b      	lsls	r3, r3, #12
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a0f      	ldr	r2, [pc, #60]	; (8003724 <TIM_OC4_SetConfig+0x98>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d109      	bne.n	8003700 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	019b      	lsls	r3, r3, #6
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	621a      	str	r2, [r3, #32]
}
 800371a:	bf00      	nop
 800371c:	371c      	adds	r7, #28
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr
 8003724:	40012c00 	.word	0x40012c00

08003728 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003728:	b480      	push	{r7}
 800372a:	b087      	sub	sp, #28
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f003 031f 	and.w	r3, r3, #31
 800373a:	2201      	movs	r2, #1
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6a1a      	ldr	r2, [r3, #32]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	43db      	mvns	r3, r3
 800374a:	401a      	ands	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a1a      	ldr	r2, [r3, #32]
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f003 031f 	and.w	r3, r3, #31
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	fa01 f303 	lsl.w	r3, r1, r3
 8003760:	431a      	orrs	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	621a      	str	r2, [r3, #32]
}
 8003766:	bf00      	nop
 8003768:	371c      	adds	r7, #28
 800376a:	46bd      	mov	sp, r7
 800376c:	bc80      	pop	{r7}
 800376e:	4770      	bx	lr

08003770 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003784:	2302      	movs	r3, #2
 8003786:	e046      	b.n	8003816 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2202      	movs	r2, #2
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a16      	ldr	r2, [pc, #88]	; (8003820 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d00e      	beq.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d4:	d009      	beq.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a12      	ldr	r2, [pc, #72]	; (8003824 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d004      	beq.n	80037ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a10      	ldr	r2, [pc, #64]	; (8003828 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d10c      	bne.n	8003804 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	bc80      	pop	{r7}
 800381e:	4770      	bx	lr
 8003820:	40012c00 	.word	0x40012c00
 8003824:	40000400 	.word	0x40000400
 8003828:	40000800 	.word	0x40000800

0800382c <__libc_init_array>:
 800382c:	b570      	push	{r4, r5, r6, lr}
 800382e:	2600      	movs	r6, #0
 8003830:	4d0c      	ldr	r5, [pc, #48]	; (8003864 <__libc_init_array+0x38>)
 8003832:	4c0d      	ldr	r4, [pc, #52]	; (8003868 <__libc_init_array+0x3c>)
 8003834:	1b64      	subs	r4, r4, r5
 8003836:	10a4      	asrs	r4, r4, #2
 8003838:	42a6      	cmp	r6, r4
 800383a:	d109      	bne.n	8003850 <__libc_init_array+0x24>
 800383c:	f000 f822 	bl	8003884 <_init>
 8003840:	2600      	movs	r6, #0
 8003842:	4d0a      	ldr	r5, [pc, #40]	; (800386c <__libc_init_array+0x40>)
 8003844:	4c0a      	ldr	r4, [pc, #40]	; (8003870 <__libc_init_array+0x44>)
 8003846:	1b64      	subs	r4, r4, r5
 8003848:	10a4      	asrs	r4, r4, #2
 800384a:	42a6      	cmp	r6, r4
 800384c:	d105      	bne.n	800385a <__libc_init_array+0x2e>
 800384e:	bd70      	pop	{r4, r5, r6, pc}
 8003850:	f855 3b04 	ldr.w	r3, [r5], #4
 8003854:	4798      	blx	r3
 8003856:	3601      	adds	r6, #1
 8003858:	e7ee      	b.n	8003838 <__libc_init_array+0xc>
 800385a:	f855 3b04 	ldr.w	r3, [r5], #4
 800385e:	4798      	blx	r3
 8003860:	3601      	adds	r6, #1
 8003862:	e7f2      	b.n	800384a <__libc_init_array+0x1e>
 8003864:	080038dc 	.word	0x080038dc
 8003868:	080038dc 	.word	0x080038dc
 800386c:	080038dc 	.word	0x080038dc
 8003870:	080038e0 	.word	0x080038e0

08003874 <memset>:
 8003874:	4603      	mov	r3, r0
 8003876:	4402      	add	r2, r0
 8003878:	4293      	cmp	r3, r2
 800387a:	d100      	bne.n	800387e <memset+0xa>
 800387c:	4770      	bx	lr
 800387e:	f803 1b01 	strb.w	r1, [r3], #1
 8003882:	e7f9      	b.n	8003878 <memset+0x4>

08003884 <_init>:
 8003884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003886:	bf00      	nop
 8003888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800388a:	bc08      	pop	{r3}
 800388c:	469e      	mov	lr, r3
 800388e:	4770      	bx	lr

08003890 <_fini>:
 8003890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003892:	bf00      	nop
 8003894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003896:	bc08      	pop	{r3}
 8003898:	469e      	mov	lr, r3
 800389a:	4770      	bx	lr
